/* Created : Thu Jan 31 12:25:03 CST 2019
   User    : rmcclune
   Project : habitat
   Script  : /gfe/TOOLS/cfs_tools/cfs_cdd/scripts/HabTypesHeaderExtended.js
   Table(s): DSG_GNC_TLM, CCSDS_TLM_HDR, CCSDS_Primary */

#ifndef _DSG_TYPES_H_
#define _DSG_TYPES_H_

#include "shared_types.h"
///* @file */


#ifdef __cplusplus
extern "C" {
#endif
/** Structure DSG_GNC_TLM (2126 bytes in size)  *
* DSG simulation GNC telemetry for downlink to MCC graphical scene generation
*/
typedef struct
{
  CCSDS_TLM_HDR cfsHeader;                         ///< [    0] (16 bytes)  Extended CFS SB message Header #CCSDS_TLM_HDR
  double PPE_R_REFCG2CG_RBDY_X;                    ///< [   16] (8 bytes)  
  double PPE_R_REFCG2CG_RBDY_Y;                    ///< [   24] (8 bytes)  
  double PPE_R_REFCG2CG_RBDY_Z;                    ///< [   32] (8 bytes)  
  double PPE_V_REFCG2CG_RBDY_X;                    ///< [   40] (8 bytes)  
  double PPE_V_REFCG2CG_RBDY_Y;                    ///< [   48] (8 bytes)  
  double PPE_V_REFCG2CG_RBDY_Z;                    ///< [   56] (8 bytes)  
  double PPE_R_REFCG2CG_INRTL_X;                   ///< [   64] (8 bytes)  
  double PPE_R_REFCG2CG_INRTL_Y;                   ///< [   72] (8 bytes)  
  double PPE_R_REFCG2CG_INRTL_Z;                   ///< [   80] (8 bytes)  
  double PPE_V_REFCG2CG_INRTL_X;                   ///< [   88] (8 bytes)  
  double PPE_V_REFCG2CG_INRTL_Y;                   ///< [   96] (8 bytes)  
  double PPE_V_REFCG2CG_INRTL_Z;                   ///< [  104] (8 bytes)  
  double PPE_R_TDP2VDP_TDP_X;                      ///< [  112] (8 bytes)  
  double PPE_R_TDP2VDP_TDP_Y;                      ///< [  120] (8 bytes)  
  double PPE_R_TDP2VDP_TDP_Z;                      ///< [  128] (8 bytes)  
  double PPE_V_TDP2VDP_TDP_X;                      ///< [  136] (8 bytes)  
  double PPE_V_TDP2VDP_TDP_Y;                      ///< [  144] (8 bytes)  
  double PPE_V_TDP2VDP_TDP_Z;                      ///< [  152] (8 bytes)  
  double PPE_E_INRTL2BDY_ROLL;                     ///< [  160] (8 bytes)  
  double PPE_E_INRTL2BDY_PITCH;                    ///< [  168] (8 bytes)  
  double PPE_E_INRTL2BDY_YAW;                      ///< [  176] (8 bytes)  
  double PPE_W_INRTL2BDY_INRTL_X;                  ///< [  184] (8 bytes)  
  double PPE_W_INRTL2BDY_INRTL_Y;                  ///< [  192] (8 bytes)  
  double PPE_W_INRTL2BDY_INRTL_Z;                  ///< [  200] (8 bytes)  
  double PPE_E_NED2BDY_ROLL;                       ///< [  208] (8 bytes)  
  double PPE_E_NED2BDY_PITCH;                      ///< [  216] (8 bytes)  
  double PPE_E_NED2BDY_YAW;                        ///< [  224] (8 bytes)  
  double PPE_E_NED2BDY_NED_X;                      ///< [  232] (8 bytes)  
  double PPE_E_NED2BDY_NED_Y;                      ///< [  240] (8 bytes)  
  double PPE_E_NED2BDY_NED_Z;                      ///< [  248] (8 bytes)  
  double PPE_E_LVLH2BDY_ROLL;                      ///< [  256] (8 bytes)  
  double PPE_E_LVLH2BDY_PITCH;                     ///< [  264] (8 bytes)  
  double PPE_E_LVLH2BDY_YAW;                       ///< [  272] (8 bytes)  
  double PPE_W_LVLH2BDY_LVLH_X;                    ///< [  280] (8 bytes)  
  double PPE_W_LVLH2BDY_LVLH_Y;                    ///< [  288] (8 bytes)  
  double PPE_W_LVLH2BDY_LVLH_Z;                    ///< [  296] (8 bytes)  
  double PPE_E_TDP2VDP_ROLL;                       ///< [  304] (8 bytes)  
  double PPE_E_TDP2VDP_PITCH;                      ///< [  312] (8 bytes)  
  double PPE_E_TDP2VDP_YAW;                        ///< [  320] (8 bytes)  
  double PPE_W_TDP2VDP_TDP_X;                      ///< [  328] (8 bytes)  
  double PPE_W_TDP2VDP_TDP_Y;                      ///< [  336] (8 bytes)  
  double PPE_W_TDP2VDP_TDP_Z;                      ///< [  344] (8 bytes)  
  uint8_t PPE_GNC_TARGET_POS_CMD;                  ///< [  352] (1 bytes)  
  uint8_t PPE_GNC_TARGET_ATT_CMD;                  ///< [  353] (1 bytes)  
  uint8_t PPE_GNC_ROT_MODE;                        ///< [  354] (1 bytes)  
  uint8_t PPE_GNC_TRANS_MODE;                      ///< [  355] (1 bytes)  
  uint8_t PPE_GNC_SIXDOF_MODE;                     ///< [  356] (1 bytes)  
  uint8_t PPE_GNC_SNAP_TO_CMP;                     ///< [  357] (1 bytes)  
  double PPE_E_NEDSNAP2BDY_ROLL;                   ///< [  358] (8 bytes)  
  double PPE_E_NEDSNAP2BDY_PITCH;                  ///< [  366] (8 bytes)  
  double PPE_E_NEDSNAP2BDY_YAW;                    ///< [  374] (8 bytes)  
  double PPE_E_INRTLSNAP2BDY_ROLL;                 ///< [  382] (8 bytes)  
  double PPE_E_INRTLSNAP2BDY_PITCH;                ///< [  390] (8 bytes)  
  double PPE_E_INRTLSNAP2BDY_YAW;                  ///< [  398] (8 bytes)  
  double PPE_E_TDPSNAP2VDP_ROLL;                   ///< [  406] (8 bytes)  
  double PPE_E_TDPSNAP2VDP_PITCH;                  ///< [  414] (8 bytes)  
  double PPE_E_TDPSNAP2VDP_YAW;                    ///< [  422] (8 bytes)  
  double PPE_GNC_R_TRANFER_TO_CMD_X;               ///< [  430] (8 bytes)  
  double PPE_GNC_R_TRANFER_TO_CMD_Y;               ///< [  438] (8 bytes)  
  double PPE_GNC_R_TRANFER_TO_CMD_Z;               ///< [  446] (8 bytes)  
  double PPE_GNC_E_TRANFER_TO_CMD_ROLL;            ///< [  454] (8 bytes)  
  double PPE_GNC_E_TRANFER_TO_CMD_PITCH;           ///< [  462] (8 bytes)  
  double PPE_GNC_E_TRANFER_TO_CMD_YAW;             ///< [  470] (8 bytes)  
  double PPE_GNC_DELTA_V_MAG_SUM;                  ///< [  478] (8 bytes)  
  double PPE_GNC_DELTA_W_MAG_SUM;                  ///< [  486] (8 bytes)  
  uint8_t PPE_GNC_CTRL_MODE_INT;                   ///< [  494] (1 bytes)  
  double PPE_LATITUDE;                             ///< [  495] (8 bytes)  
  double PPE_LONGITUDE;                            ///< [  503] (8 bytes)  
  double PPE_ALTITUDE;                             ///< [  511] (8 bytes)  
  double PPE_FUEL_PROP_MASS_1;                     ///< [  519] (8 bytes)  
  double PPE_FUEL_PROP_MASS_2;                     ///< [  527] (8 bytes)  
  double PPE_OX_PROP_MASS_1;                       ///< [  535] (8 bytes)  
  double PPE_OX_PROP_MASS_2;                       ///< [  543] (8 bytes)  
  double PPE_FUEL_PROP_MASS_1_FULL;                ///< [  551] (8 bytes)  
  double PPE_FUEL_PROP_MASS_2_FULL;                ///< [  559] (8 bytes)  
  double PPE_OX_PROP_MASS_1_FULL;                  ///< [  567] (8 bytes)  
  double PPE_OX_PROP_MASS_2_FULL;                  ///< [  575] (8 bytes)  
  uint8_t PPE_HC_CONTROL_FRAME;                    ///< [  583] (1 bytes)  
  double MPCV_R_REFCG2CG_RBDY_X;                   ///< [  584] (8 bytes)  
  double MPCV_R_REFCG2CG_RBDY_Y;                   ///< [  592] (8 bytes)  
  double MPCV_R_REFCG2CG_RBDY_Z;                   ///< [  600] (8 bytes)  
  double MPCV_V_REFCG2CG_RBDY_X;                   ///< [  608] (8 bytes)  
  double MPCV_V_REFCG2CG_RBDY_Y;                   ///< [  616] (8 bytes)  
  double MPCV_V_REFCG2CG_RBDY_Z;                   ///< [  624] (8 bytes)  
  double MPCV_R_REFCG2CG_INRTL_X;                  ///< [  632] (8 bytes)  
  double MPCV_R_REFCG2CG_INRTL_Y;                  ///< [  640] (8 bytes)  
  double MPCV_R_REFCG2CG_INRTL_Z;                  ///< [  648] (8 bytes)  
  double MPCV_V_REFCG2CG_INRTL_X;                  ///< [  656] (8 bytes)  
  double MPCV_V_REFCG2CG_INRTL_Y;                  ///< [  664] (8 bytes)  
  double MPCV_V_REFCG2CG_INRTL_Z;                  ///< [  672] (8 bytes)  
  double MPCV_R_TDP2VDP_TDP_X;                     ///< [  680] (8 bytes)  
  double MPCV_R_TDP2VDP_TDP_Y;                     ///< [  688] (8 bytes)  
  double MPCV_R_TDP2VDP_TDP_Z;                     ///< [  696] (8 bytes)  
  double MPCV_V_TDP2VDP_TDP_X;                     ///< [  704] (8 bytes)  
  double MPCV_V_TDP2VDP_TDP_Y;                     ///< [  712] (8 bytes)  
  double MPCV_V_TDP2VDP_TDP_Z;                     ///< [  720] (8 bytes)  
  double MPCV_E_INRTL2BDY_ROLL;                    ///< [  728] (8 bytes)  
  double MPCV_E_INRTL2BDY_PITCH;                   ///< [  736] (8 bytes)  
  double MPCV_E_INRTL2BDY_YAW;                     ///< [  744] (8 bytes)  
  double MPCV_W_INRTL2BDY_INRTL_X;                 ///< [  752] (8 bytes)  
  double MPCV_W_INRTL2BDY_INRTL_Y;                 ///< [  760] (8 bytes)  
  double MPCV_W_INRTL2BDY_INRTL_Z;                 ///< [  768] (8 bytes)  
  double MPCV_E_NED2BDY_ROLL;                      ///< [  776] (8 bytes)  
  double MPCV_E_NED2BDY_PITCH;                     ///< [  784] (8 bytes)  
  double MPCV_E_NED2BDY_YAW;                       ///< [  792] (8 bytes)  
  double MPCV_E_NED2BDY_NED_X;                     ///< [  800] (8 bytes)  
  double MPCV_E_NED2BDY_NED_Y;                     ///< [  808] (8 bytes)  
  double MPCV_E_NED2BDY_NED_Z;                     ///< [  816] (8 bytes)  
  double MPCV_E_LVLH2BDY_ROLL;                     ///< [  824] (8 bytes)  
  double MPCV_E_LVLH2BDY_PITCH;                    ///< [  832] (8 bytes)  
  double MPCV_E_LVLH2BDY_YAW;                      ///< [  840] (8 bytes)  
  double MPCV_W_LVLH2BDY_LVLH_X;                   ///< [  848] (8 bytes)  
  double MPCV_W_LVLH2BDY_LVLH_Y;                   ///< [  856] (8 bytes)  
  double MPCV_W_LVLH2BDY_LVLH_Z;                   ///< [  864] (8 bytes)  
  double MPCV_E_TDP2VDP_ROLL;                      ///< [  872] (8 bytes)  
  double MPCV_E_TDP2VDP_PITCH;                     ///< [  880] (8 bytes)  
  double MPCV_E_TDP2VDP_YAW;                       ///< [  888] (8 bytes)  
  double MPCV_W_TDP2VDP_TDP_X;                     ///< [  896] (8 bytes)  
  double MPCV_W_TDP2VDP_TDP_Y;                     ///< [  904] (8 bytes)  
  double MPCV_W_TDP2VDP_TDP_Z;                     ///< [  912] (8 bytes)  
  uint8_t MPCV_GNC_TARGET_POS_CMD;                 ///< [  920] (1 bytes)  
  uint8_t MPCV_GNC_TARGET_ATT_CMD;                 ///< [  921] (1 bytes)  
  uint8_t MPCV_GNC_ROT_MODE;                       ///< [  922] (1 bytes)  
  uint8_t MPCV_GNC_TRANS_MODE;                     ///< [  923] (1 bytes)  
  uint8_t MPCV_GNC_SIXDOF_MODE;                    ///< [  924] (1 bytes)  
  uint8_t MPCV_GNC_SNAP_TO_CMP;                    ///< [  925] (1 bytes)  
  double MPCV_E_NEDSNAP2BDY_ROLL;                  ///< [  926] (8 bytes)  
  double MPCV_E_NEDSNAP2BDY_PITCH;                 ///< [  934] (8 bytes)  
  double MPCV_E_NEDSNAP2BDY_YAW;                   ///< [  942] (8 bytes)  
  double MPCV_E_INRTLSNAP2BDY_ROLL;                ///< [  950] (8 bytes)  
  double MPCV_E_INRTLSNAP2BDY_PITCH;               ///< [  958] (8 bytes)  
  double MPCV_E_INRTLSNAP2BDY_YAW;                 ///< [  966] (8 bytes)  
  double MPCV_E_TDPSNAP2VDP_ROLL;                  ///< [  974] (8 bytes)  
  double MPCV_E_TDPSNAP2VDP_PITCH;                 ///< [  982] (8 bytes)  
  double MPCV_E_TDPSNAP2VDP_YAW;                   ///< [  990] (8 bytes)  
  double MPCV_GNC_R_TRANFER_TO_CMD_X;              ///< [  998] (8 bytes)  
  double MPCV_GNC_R_TRANFER_TO_CMD_Y;              ///< [ 1006] (8 bytes)  
  double MPCV_GNC_R_TRANFER_TO_CMD_Z;              ///< [ 1014] (8 bytes)  
  double MPCV_GNC_E_TRANFER_TO_CMD_ROLL;           ///< [ 1022] (8 bytes)  
  double MPCV_GNC_E_TRANFER_TO_CMD_PITCH;          ///< [ 1030] (8 bytes)  
  double MPCV_GNC_E_TRANFER_TO_CMD_YAW;            ///< [ 1038] (8 bytes)  
  double MPCV_GNC_DELTA_V_MAG_SUM;                 ///< [ 1046] (8 bytes)  
  double MPCV_GNC_DELTA_W_MAG_SUM;                 ///< [ 1054] (8 bytes)  
  uint8_t MPCV_GNC_CTRL_MODE_INT;                  ///< [ 1062] (1 bytes)  
  double MPCV_LATITUDE;                            ///< [ 1063] (8 bytes)  
  double MPCV_LONGITUDE;                           ///< [ 1071] (8 bytes)  
  double MPCV_ALTITUDE;                            ///< [ 1079] (8 bytes)  
  double MPCV_FUEL_PROP_MASS_1;                    ///< [ 1087] (8 bytes)  
  double MPCV_FUEL_PROP_MASS_2;                    ///< [ 1095] (8 bytes)  
  double MPCV_OX_PROP_MASS_1;                      ///< [ 1103] (8 bytes)  
  double MPCV_OX_PROP_MASS_2;                      ///< [ 1111] (8 bytes)  
  double MPCV_FUEL_PROP_MASS_1_FULL;               ///< [ 1119] (8 bytes)  
  double MPCV_FUEL_PROP_MASS_2_FULL;               ///< [ 1127] (8 bytes)  
  double MPCV_OX_PROP_MASS_1_FULL;                 ///< [ 1135] (8 bytes)  
  double MPCV_OX_PROP_MASS_2_FULL;                 ///< [ 1143] (8 bytes)  
  uint8_t MPCV_HC_CONTROL_FRAME;                   ///< [ 1151] (1 bytes)  
  double MPCV_RANGE_SENSOR_F_RANGE;                ///< [ 1152] (8 bytes)  
  double MPCV_RANGE_SENSOR_D_RANGE;                ///< [ 1160] (8 bytes)  
  double MPCV_RANGE_SENSOR_P_RANGE;                ///< [ 1168] (8 bytes)  
  double MPCV_RANGE_SENSOR_S_RANGE;                ///< [ 1176] (8 bytes)  
  double MPCV_RANGE_SENSOR_F_RATE;                 ///< [ 1184] (8 bytes)  
  double MPCV_RANGE_SENSOR_D_RATE;                 ///< [ 1192] (8 bytes)  
  double MPCV_RANGE_SENSOR_P_RATE;                 ///< [ 1200] (8 bytes)  
  double MPCV_RANGE_SENSOR_S_RATE;                 ///< [ 1208] (8 bytes)  
  uint8_t MPCV_RENDEZVOUS_AUTO_CONTROL;            ///< [ 1216] (1 bytes)  
  double ARM_KIN_JOINT_ANGLE_0;                    ///< [ 1217] (8 bytes)  
  double ARM_KIN_JOINT_ANGLE_1;                    ///< [ 1225] (8 bytes)  
  double ARM_KIN_JOINT_ANGLE_2;                    ///< [ 1233] (8 bytes)  
  double ARM_KIN_JOINT_ANGLE_3;                    ///< [ 1241] (8 bytes)  
  double ARM_KIN_JOINT_ANGLE_4;                    ///< [ 1249] (8 bytes)  
  double ARM_KIN_JOINT_ANGLE_5;                    ///< [ 1257] (8 bytes)  
  double ARM_KIN_JOINT_ANGLE_6;                    ///< [ 1265] (8 bytes)  
  double ARM_KIN_JOINT_ANGLE_7;                    ///< [ 1273] (8 bytes)  
  double ARM_KIN_POR_POS_X;                        ///< [ 1281] (8 bytes)  
  double ARM_KIN_POR_POS_Y;                        ///< [ 1289] (8 bytes)  
  double ARM_KIN_POR_POS_Z;                        ///< [ 1297] (8 bytes)  
  double ARM_KIN_POR_ANG_1;                        ///< [ 1305] (8 bytes)  
  double ARM_KIN_POR_ANG_2;                        ///< [ 1313] (8 bytes)  
  double ARM_KIN_POR_ANG_3;                        ///< [ 1321] (8 bytes)  
  double ARM_R_COM_TASK_00;                        ///< [ 1329] (8 bytes)  
  double ARM_R_COM_TASK_01;                        ///< [ 1337] (8 bytes)  
  double ARM_R_COM_TASK_02;                        ///< [ 1345] (8 bytes)  
  double ARM_R_COM_TASK_10;                        ///< [ 1353] (8 bytes)  
  double ARM_R_COM_TASK_11;                        ///< [ 1361] (8 bytes)  
  double ARM_R_COM_TASK_12;                        ///< [ 1369] (8 bytes)  
  double ARM_R_COM_TASK_20;                        ///< [ 1377] (8 bytes)  
  double ARM_R_COM_TASK_21;                        ///< [ 1385] (8 bytes)  
  double ARM_R_COM_TASK_22;                        ///< [ 1393] (8 bytes)  
  double ARM_E_COM_TASK_00;                        ///< [ 1401] (8 bytes)  
  double ARM_E_COM_TASK_01;                        ///< [ 1409] (8 bytes)  
  double ARM_E_COM_TASK_02;                        ///< [ 1417] (8 bytes)  
  double ARM_E_COM_TASK_10;                        ///< [ 1425] (8 bytes)  
  double ARM_E_COM_TASK_11;                        ///< [ 1433] (8 bytes)  
  double ARM_E_COM_TASK_12;                        ///< [ 1441] (8 bytes)  
  double ARM_E_COM_TASK_20;                        ///< [ 1449] (8 bytes)  
  double ARM_E_COM_TASK_21;                        ///< [ 1457] (8 bytes)  
  double ARM_E_COM_TASK_22;                        ///< [ 1465] (8 bytes)  
  double SAMPLE_RETURN_VEH_POS_X;                  ///< [ 1473] (8 bytes)  
  double SAMPLE_RETURN_VEH_POS_Y;                  ///< [ 1481] (8 bytes)  
  double SAMPLE_RETURN_VEH_POS_Z;                  ///< [ 1489] (8 bytes)  
  double SAMPLE_RETURN_VEH_ORI_0;                  ///< [ 1497] (8 bytes)  
  double SAMPLE_RETURN_VEH_ORI_1;                  ///< [ 1505] (8 bytes)  
  double SAMPLE_RETURN_VEH_ORI_2;                  ///< [ 1513] (8 bytes)  
  float HAL_DOOR_STARTBOARD_HINGE_ANGLE;           ///< [ 1521] (4 bytes)  
  float HAL_DOOR_PORT_HINGE_ANGLE;                 ///< [ 1525] (4 bytes)  
  float SAL_DOOR_PORT_HINGE_ANGLE;                 ///< [ 1529] (4 bytes)  
  double SAL_DOOR_PORT_TRAY_EXTENSION;             ///< [ 1533] (8 bytes)  
  uint8_t SAMPLE_RETURN_VEH_APPEAR;                ///< [ 1541] (1 bytes)  
  uint8_t CTB_ITEM_APPEAR;                         ///< [ 1542] (1 bytes)  
  uint8_t ARM_SEQUENCER_MODE;                      ///< [ 1543] (1 bytes)  
  uint8_t ARM_SEQUENCER_JOINT_NUMBER;              ///< [ 1544] (1 bytes)  
  double ARM_KIN_R_ORIGIN_POR_X;                   ///< [ 1545] (8 bytes)  
  double ARM_KIN_R_ORIGIN_POR_Y;                   ///< [ 1553] (8 bytes)  
  double ARM_KIN_R_ORIGIN_POR_Z;                   ///< [ 1561] (8 bytes)  
  double ARM_KIN_ORIGIN_POR_ANG_0;                 ///< [ 1569] (8 bytes)  
  double ARM_KIN_ORIGIN_POR_ANG_1;                 ///< [ 1577] (8 bytes)  
  double ARM_KIN_ORIGIN_POR_ANG_2;                 ///< [ 1585] (8 bytes)  
  uint8_t ARM_SEQUENCER_AUTO_MODE_PROC;            ///< [ 1593] (1 bytes)  
  double ARM_SEQUENCER_JOINT_ANGLE_0;              ///< [ 1594] (8 bytes)  
  double ARM_SEQUENCER_JOINT_ANGLE_1;              ///< [ 1602] (8 bytes)  
  double ARM_SEQUENCER_JOINT_ANGLE_2;              ///< [ 1610] (8 bytes)  
  double ARM_SEQUENCER_JOINT_ANGLE_3;              ///< [ 1618] (8 bytes)  
  double ARM_SEQUENCER_JOINT_ANGLE_4;              ///< [ 1626] (8 bytes)  
  double ARM_SEQUENCER_JOINT_ANGLE_5;              ///< [ 1634] (8 bytes)  
  double ARM_SEQUENCER_JOINT_ANGLE_6;              ///< [ 1642] (8 bytes)  
  double ARM_SEQUENCER_JOINT_ANGLE_7;              ///< [ 1650] (8 bytes)  
  double ARM_HIGH_SOFT_STOP_0;                     ///< [ 1658] (8 bytes)  
  double ARM_HIGH_SOFT_STOP_1;                     ///< [ 1666] (8 bytes)  
  double ARM_HIGH_SOFT_STOP_2;                     ///< [ 1674] (8 bytes)  
  double ARM_HIGH_SOFT_STOP_3;                     ///< [ 1682] (8 bytes)  
  double ARM_HIGH_SOFT_STOP_4;                     ///< [ 1690] (8 bytes)  
  double ARM_HIGH_SOFT_STOP_5;                     ///< [ 1698] (8 bytes)  
  double ARM_HIGH_SOFT_STOP_6;                     ///< [ 1706] (8 bytes)  
  double ARM_HIGH_SOFT_STOP_7;                     ///< [ 1714] (8 bytes)  
  double ARM_LOW_SOFT_STOP_0;                      ///< [ 1722] (8 bytes)  
  double ARM_LOW_SOFT_STOP_1;                      ///< [ 1730] (8 bytes)  
  double ARM_LOW_SOFT_STOP_2;                      ///< [ 1738] (8 bytes)  
  double ARM_LOW_SOFT_STOP_3;                      ///< [ 1746] (8 bytes)  
  double ARM_LOW_SOFT_STOP_4;                      ///< [ 1754] (8 bytes)  
  double ARM_LOW_SOFT_STOP_5;                      ///< [ 1762] (8 bytes)  
  double ARM_LOW_SOFT_STOP_6;                      ///< [ 1770] (8 bytes)  
  double ARM_LOW_SOFT_STOP_7;                      ///< [ 1778] (8 bytes)  
  double ARM_SEQUENCER_HC_RATE;                    ///< [ 1786] (8 bytes)  
  uint8_t ARM_SEQUENCER_SINGULARITY;               ///< [ 1794] (1 bytes)  
  uint8_t ARM_SEQUENCER_SINGULARITY_APPROACH;      ///< [ 1795] (1 bytes)  
  uint8_t ARM_SEQUENCER_BASELOCID;                 ///< [ 1796] (1 bytes)  
  uint8_t ARM_SEQUENCER_EXECBASECHANGE;            ///< [ 1797] (1 bytes)  
  uint8_t ARM_SEQUENCER_NUMBASELOCS;               ///< [ 1798] (1 bytes)  
  uint8_t ARM_SEQUENCER_CAPTURESTATE;              ///< [ 1799] (1 bytes)  
  uint8_t ARM_SEQUENCER_CAPTURESTATEMISSED;        ///< [ 1800] (1 bytes)  
  uint8_t ARM_SEQUENCER_DESIREDCONFIGSTATUS;       ///< [ 1801] (1 bytes)  
  uint8_t SAL_DOOR_PORT_STATE;                     ///< [ 1802] (1 bytes)  
  uint8_t SAL_DOOR_PORT_TRAYSTATE;                 ///< [ 1803] (1 bytes)  
  uint8_t ARM_PAYLOADEXTERNCONTROL_ID_0;           ///< [ 1804] (1 bytes)  
  uint8_t ARM_PAYLOADEXTERNCONTROL_ID_1;           ///< [ 1805] (1 bytes)  
  uint8_t ARM_PAYLOADEXTERNCONTROL_ID_2;           ///< [ 1806] (1 bytes)  
  uint8_t ARM_PAYLOADEXTERNCONTROL_ID_3;           ///< [ 1807] (1 bytes)  
  uint8_t ARM_CAPTURESTATUS_0;                     ///< [ 1808] (1 bytes)  
  uint8_t ARM_CAPTURESTATUS_1;                     ///< [ 1809] (1 bytes)  
  uint8_t ARM_CAPTURESTATUS_2;                     ///< [ 1810] (1 bytes)  
  uint8_t ARM_CAPTURESTATUS_3;                     ///< [ 1811] (1 bytes)  
  uint8_t ARM_SEQUENCER_GFPAYLOADID;               ///< [ 1812] (1 bytes)  
  float TELESCOPE_AZIMUTH;                         ///< [ 1813] (4 bytes)  
  float TELESCOPE_ELEVATION;                       ///< [ 1817] (4 bytes)  
  float TELESCOPE_ZOOM_LEVEL;                      ///< [ 1821] (4 bytes)  
  uint8_t METEOROID_IMPACT_INTENSITY;              ///< [ 1825] (1 bytes)  
  double METEOROID_POS_X;                          ///< [ 1826] (8 bytes)  
  double METEOROID_POS_Y;                          ///< [ 1834] (8 bytes)  
  double METEOROID_POS_Z;                          ///< [ 1842] (8 bytes)  
  double METEOROID_Q_SCALAR;                       ///< [ 1850] (8 bytes)  
  double METEOROID_Q_VECTOR_0;                     ///< [ 1858] (8 bytes)  
  double METEOROID_Q_VECTOR_1;                     ///< [ 1866] (8 bytes)  
  double METEOROID_Q_VECTOR_2;                     ///< [ 1874] (8 bytes)  
  uint8_t TELESCOPE_OUTPUT_MODE;                   ///< [ 1882] (1 bytes)  
  double METEOROID_IMPACT_TIME;                    ///< [ 1883] (8 bytes)  
  uint8_t TELESCOPE_OBJECT_ID;                     ///< [ 1891] (1 bytes)  
  uint8_t TELESCOPE_TARGET_ACQUIRED;               ///< [ 1892] (1 bytes)  
  uint8_t TELESCOPE_SOLAR_DANGER_MODE;             ///< [ 1893] (1 bytes)  
  double PPE_SOLAR_PANEL0_EULER_PITCH;             ///< [ 1894] (8 bytes)  
  double PPE_SOLAR_PANEL0_EULER_YAW;               ///< [ 1902] (8 bytes)  
  double PPE_SOLAR_PANEL0_EULER_ROLL;              ///< [ 1910] (8 bytes)  
  double PPE_SOLAR_PANEL1_EULER_PITCH;             ///< [ 1918] (8 bytes)  
  double PPE_SOLAR_PANEL1_EULER_YAW;               ///< [ 1926] (8 bytes)  
  double PPE_SOLAR_PANEL1_EULER_ROLL;              ///< [ 1934] (8 bytes)  
  double UTC_JULIAN_DATE;                          ///< [ 1942] (8 bytes)  
  double TRUNC_UTC_JULIAN_TIME;                    ///< [ 1950] (8 bytes)  
  double PPE_INRTL_POS_X;                          ///< [ 1958] (8 bytes)  
  double PPE_INRTL_POS_Y;                          ///< [ 1966] (8 bytes)  
  double PPE_INRTL_POS_Z;                          ///< [ 1974] (8 bytes)  
  double PPE_INRTL_Q_SCALAR;                       ///< [ 1982] (8 bytes)  
  double PPE_INRTL_Q_VECTOR_0;                     ///< [ 1990] (8 bytes)  
  double PPE_INRTL_Q_VECTOR_1;                     ///< [ 1998] (8 bytes)  
  double PPE_INRTL_Q_VECTOR_2;                     ///< [ 2006] (8 bytes)  
  double MPCV_INRTL_POS_X;                         ///< [ 2014] (8 bytes)  
  double MPCV_INRTL_POS_Y;                         ///< [ 2022] (8 bytes)  
  double MPCV_INRTL_POS_Z;                         ///< [ 2030] (8 bytes)  
  double MPCV_INRTL_Q_SCALAR;                      ///< [ 2038] (8 bytes)  
  double MPCV_INRTL_Q_VECTOR_0;                    ///< [ 2046] (8 bytes)  
  double MPCV_INRTL_Q_VECTOR_1;                    ///< [ 2054] (8 bytes)  
  double MPCV_INRTL_Q_VECTOR_2;                    ///< [ 2062] (8 bytes)  
  double AERCAM_INRTL_POS_X;                       ///< [ 2070] (8 bytes)  
  double AERCAM_INRTL_POS_Y;                       ///< [ 2078] (8 bytes)  
  double AERCAM_INRTL_POS_Z;                       ///< [ 2086] (8 bytes)  
  double AERCAM_INRTL_Q_SCALAR;                    ///< [ 2094] (8 bytes)  
  double AERCAM_INRTL_Q_VECTOR_0;                  ///< [ 2102] (8 bytes)  
  double AERCAM_INRTL_Q_VECTOR_1;                  ///< [ 2110] (8 bytes)  
  double AERCAM_INRTL_Q_VECTOR_2;                  ///< [ 2118] (8 bytes)  
} DSG_GNC_TLM;     ///<  Total size of 2126 bytes

void byteswap_DSG_GNC_TLM(DSG_GNC_TLM *inPtr, DSG_GNC_TLM *outPtr, int direction);
void bitswap_DSG_GNC_TLM(DSG_GNC_TLM *inPtr, DSG_GNC_TLM *outPtr, int direction);
void byteswap_CCSDS_TLM_HDR(CCSDS_TLM_HDR *inPtr, CCSDS_TLM_HDR *outPtr, int direction);
void bitswap_CCSDS_TLM_HDR(CCSDS_TLM_HDR *inPtr, CCSDS_TLM_HDR *outPtr, int direction);
void byteswap_CCSDS_Primary(CCSDS_Primary *inPtr, CCSDS_Primary *outPtr, int direction);
void bitswap_CCSDS_Primary(CCSDS_Primary *inPtr, CCSDS_Primary *outPtr, int direction);
#ifdef __cplusplus
}
#endif
#endif /// #ifndef _DSG_TYPES_H_
