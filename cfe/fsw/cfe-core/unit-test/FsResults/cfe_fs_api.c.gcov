        -:    0:Source:/home/mdeschu/cfe-660-ut/cfe/fsw/cfe-core/src/fs/cfe_fs_api.c
        -:    0:Programs:3
        -:    1:/*
        -:    2:** $Id: cfe_fs_api.c 1.8 2014/08/22 17:06:20GMT-05:00 lwalling Exp  $
        -:    3:**
        -:    4:**      Copyright (c) 2004-2012, United States government as represented by the 
        -:    5:**      administrator of the National Aeronautics Space Administration.  
        -:    6:**      All rights reserved. This software(cFE) was created at NASA's Goddard 
        -:    7:**      Space Flight Center pursuant to government contracts.
        -:    8:**
        -:    9:**      This is governed by the NASA Open Source Agreement and may be used, 
        -:   10:**      distributed and modified only pursuant to the terms of that agreement.
        -:   11:**
        -:   12:** Purpose:  cFE File Services (FS) library API source file
        -:   13:**
        -:   14:** Author:   S.Walling/Microtel
        -:   15:**
        -:   16:** Notes:
        -:   17:**
        -:   18:*/
        -:   19:
        -:   20:
        -:   21:/*
        -:   22:** Required header files...
        -:   23:*/
        -:   24:#include "private/cfe_private.h"
        -:   25:#include "cfe_fs_priv.h"
        -:   26:#include "cfe_fs.h"
        -:   27:#include "cfe_time.h"
        -:   28:#include "osapi.h"
        -:   29:#include "cfe_psp.h"
        -:   30:#include "cfe_es.h"
        -:   31:#include <string.h>
        -:   32:
        -:   33:
        -:   34:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   35:/*                                                                         */
        -:   36:/* CFE_FS_ReadHeader() -- read cFE file header structure                   */
        -:   37:/*                                                                         */
        -:   38:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   39:
        2:   40:int32 CFE_FS_ReadHeader(CFE_FS_Header_t *Hdr, int32 FileDes)
        -:   41:{
        -:   42:    int32   Result;
        2:   43:    int32   EndianCheck = 0x01020304;
        -:   44:    
        -:   45:    /*
        -:   46:    ** Ensure that we are at the start of the file...
        -:   47:    */
        2:   48:    Result = OS_lseek(FileDes, 0, OS_SEEK_SET);
        -:   49:
        2:   50:    if (Result == OS_SUCCESS)
        -:   51:    {
        -:   52:        /*
        -:   53:        ** Read header structure into callers buffer...
        -:   54:        */
        1:   55:        Result = OS_read(FileDes, Hdr, sizeof(CFE_FS_Header_t));
        -:   56:
        -:   57:	    /* Determine if this processor is a little endian processor */
        1:   58:    	if ((*(char *)(&EndianCheck)) == 0x04)
        -:   59:    	{
        -:   60:    	    /* If this is a little endian processor, then convert the header data structure from */
        -:   61:    	    /* its standard big-endian format into a little endian format to ease user access    */
        1:   62:    	    CFE_FS_ByteSwapCFEHeader(Hdr);
        -:   63:    	}
        -:   64:    }
        -:   65:    
        2:   66:    return(Result);
        -:   67:
        -:   68:} /* End of CFE_FS_ReadHeader() */
        -:   69:
        -:   70:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   71:/*                                                                         */
        -:   72:/* CFE_FS_InitHeader() -- intialize cFE file header structure              */
        -:   73:/*                                                                         */
        -:   74:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        1:   75:void CFE_FS_InitHeader(CFE_FS_Header_t *Hdr, const char *Description, uint32 SubType)
        -:   76:{
        1:   77:   memset(Hdr, 0, sizeof(CFE_FS_Header_t));
        1:   78:   strncpy((char *)Hdr->Description, Description, sizeof(Hdr->Description) - 1);
        1:   79:   Hdr->SubType = SubType;
        1:   80:}
        -:   81:
        -:   82:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   83:/*                                                                         */
        -:   84:/* CFE_FS_WriteHeader() -- write cFE file header structure                 */
        -:   85:/*                                                                         */
        -:   86:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   87:
        2:   88:int32 CFE_FS_WriteHeader(int32 FileDes, CFE_FS_Header_t *Hdr)
        -:   89:{
        -:   90:    CFE_TIME_SysTime_t Time;
        -:   91:    int32   Result;
        2:   92:    int32   EndianCheck = 0x01020304;
        -:   93:
        -:   94:    /*
        -:   95:    ** Ensure that we are at the start of the file...
        -:   96:    */
        2:   97:    Result = OS_lseek(FileDes, 0, OS_SEEK_SET);
        -:   98:
        2:   99:    if (Result == OS_SUCCESS)
        -:  100:    {
        -:  101:        /*
        -:  102:        ** Fill in the ID fields...
        -:  103:        */
        1:  104:          Hdr->SpacecraftID  = CFE_PSP_GetSpacecraftId();
        1:  105:          Hdr->ProcessorID   = CFE_PSP_GetProcessorId();
        1:  106:          CFE_ES_GetAppID((uint32 *)&(Hdr->ApplicationID));
        -:  107:
        -:  108:          /* Fill in length field */
        -:  109:
        1:  110:          Hdr->Length = sizeof(CFE_FS_Header_t);
        -:  111:
        -:  112:          /* put the header, 'cfe1' in hex, in to the content type */
        1:  113:          Hdr->ContentType = 0x63464531;
        -:  114:
        -:  115:          
        -:  116:        /*
        -:  117:        ** Fill in the timestamp fields...
        -:  118:        */
        1:  119:          Time = CFE_TIME_GetTime();
        1:  120:          Hdr->TimeSeconds = Time.Seconds;
        1:  121:          Hdr->TimeSubSeconds = Time.Subseconds;
        -:  122:
        -:  123:        /*
        -:  124:        ** Determine if this is a little endian processor
        -:  125:        */
        1:  126:        if ((*(char *)(&EndianCheck)) == 0x04)
        -:  127:        {
        -:  128:            /* If this is a little endian processor, then convert the header data structure from */
        -:  129:            /* the native little endian format to the required CFE standard big endian format    */
        1:  130:            CFE_FS_ByteSwapCFEHeader(Hdr);
        -:  131:        }
        -:  132:
        -:  133:        /*
        -:  134:        ** Write header structure from callers buffer...
        -:  135:        */
        1:  136:        Result = OS_write(FileDes, Hdr, sizeof(CFE_FS_Header_t));
        -:  137:
        -:  138:        /*
        -:  139:        ** Determine if this is a little endian processor
        -:  140:        */
        1:  141:        if ((*(char *)(&EndianCheck)) == 0x04)
        -:  142:        {
        -:  143:            /* If this is a little endian processor, then convert the header data structure back */
        -:  144:            /* from the required CFE standard big endian format to the little endian format      */
        1:  145:            CFE_FS_ByteSwapCFEHeader(Hdr);
        -:  146:        }
        -:  147:
        -:  148:    }
        -:  149:
        2:  150:    return(Result);
        -:  151:
        -:  152:} /* End of CFE_FS_WriteHeader() */
        -:  153:
        -:  154:
        4:  155:int32 CFE_FS_SetTimestamp(int32 FileDes, CFE_TIME_SysTime_t NewTimestamp)
        -:  156:{
        4:  157:    int32              Result = OS_FS_SUCCESS;
        -:  158:    CFE_FS_Header_t    TempHdr;
        4:  159:    int32              EndianCheck = 0x01020304;
        4:  160:    CFE_TIME_SysTime_t OutTimestamp = NewTimestamp;
        4:  161:    int32              FileOffset = 0;
        -:  162:    
        4:  163:    FileOffset = ((char *)&TempHdr.TimeSeconds - (char *)&TempHdr.ContentType);
        4:  164:    Result = OS_lseek(FileDes, FileOffset, OS_SEEK_SET);
        -:  165:    
        4:  166:    if (Result == FileOffset)
        -:  167:    {
        -:  168:        /*
        -:  169:        **  Determine if this is a little endian processor
        -:  170:        */
        3:  171:        if ((*(char *)(&EndianCheck)) == 0x04)
        -:  172:        {
        -:  173:            /* If this processor is a little endian processor, then convert the timestamp to a big */
        -:  174:            /* endian format so that it is compatible with the standard cFE File Header format     */
        3:  175:            CFE_FS_ByteSwapUint32(&OutTimestamp.Seconds);
        3:  176:            CFE_FS_ByteSwapUint32(&OutTimestamp.Subseconds);
        -:  177:        }
        -:  178:        
        3:  179:        Result = OS_write(FileDes, &OutTimestamp.Seconds, sizeof(OutTimestamp.Seconds));
        -:  180:        
        -:  181:        /* On a good write, the value returned will equal the number of bytes written */
        3:  182:        if (Result == sizeof(OutTimestamp.Seconds))
        -:  183:        {
        2:  184:            Result = OS_write(FileDes, &OutTimestamp.Subseconds, sizeof(OutTimestamp.Subseconds));
        -:  185:            
        2:  186:            if (Result == sizeof(OutTimestamp.Subseconds))
        -:  187:            {
        1:  188:                Result = OS_FS_SUCCESS;
        -:  189:            }
        -:  190:            else
        -:  191:            {
        1:  192:                CFE_ES_WriteToSysLog("CFE_FS:SetTime-Failed to write Seconds (Status=0x%08X)\n", (unsigned int)Result);
        -:  193:            }
        -:  194:        }
        -:  195:        else
        -:  196:        {
        1:  197:            CFE_ES_WriteToSysLog("CFE_FS:SetTime-Failed to write Seconds (Status=0x%08X)\n", (unsigned int)Result);
        -:  198:        }
        -:  199:    }
        -:  200:    else
        -:  201:    {
        1:  202:        CFE_ES_WriteToSysLog("CFE_FS:SetTime-Failed to lseek time fields (Status=0x%08X)\n", (unsigned int)Result);
        -:  203:    }
        -:  204:    
        4:  205:    return(Result);
        -:  206:} /* End of CFE_FS_SetTimestamp() */
        -:  207:
        -:  208:
        -:  209:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  210:/*                                                                         */
        -:  211:/* CFE_FS_ByteSwapCFEHeader() -- byte swap cFE file header structure       */
        -:  212:/*                                                                         */
        -:  213:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  214:
        4:  215:void CFE_FS_ByteSwapCFEHeader(CFE_FS_Header_t *Hdr)
        -:  216:{
        4:  217:    CFE_FS_ByteSwapUint32(&Hdr->ContentType);
        4:  218:    CFE_FS_ByteSwapUint32(&Hdr->SubType);
        4:  219:    CFE_FS_ByteSwapUint32(&Hdr->Length);
        4:  220:    CFE_FS_ByteSwapUint32(&Hdr->SpacecraftID);
        4:  221:    CFE_FS_ByteSwapUint32(&Hdr->ProcessorID);
        4:  222:    CFE_FS_ByteSwapUint32(&Hdr->ApplicationID);
        4:  223:    CFE_FS_ByteSwapUint32(&Hdr->TimeSeconds);
        4:  224:    CFE_FS_ByteSwapUint32(&Hdr->TimeSubSeconds);
        -:  225:
        4:  226:} /* End of CFE_FS_ByteSwapCFEHeader() */
        -:  227:
        -:  228:
        -:  229:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  230:/*                                                                         */
        -:  231:/* CFE_FS_ByteSwapUint32() -- byte swap an uint32                          */
        -:  232:/*                                                                         */
        -:  233:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  234:
       39:  235:void CFE_FS_ByteSwapUint32(uint32 *Uint32ToSwapPtr)
        -:  236:{
       39:  237:    int32 Temp = *Uint32ToSwapPtr;
       39:  238:    char *InPtr = (char *)&Temp;
       39:  239:    char *OutPtr = (char *)Uint32ToSwapPtr;
        -:  240:    
       39:  241:    OutPtr[0] = InPtr[3];
       39:  242:    OutPtr[1] = InPtr[2];
       39:  243:    OutPtr[2] = InPtr[1];
       39:  244:    OutPtr[3] = InPtr[0];    
       39:  245:} /* End of CFE_FS_ByteSwapUint32() */
        -:  246:
        -:  247:
        -:  248:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  249:/*                                                                         */
        -:  250:/* Function: CFE_FS_ExtractFilenameFromPath                                */
        -:  251:/*                                                                         */
        -:  252:/*  This function extracts the filename from a given path/filename         */
        -:  253:/*   combination.                                                          */
        -:  254:/*                                                                         */
        -:  255:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        9:  256:int32 CFE_FS_ExtractFilenameFromPath(const char *OriginalPath, char *FileNameOnly)
        -:  257:{
        -:  258:   uint32 i,j;
        -:  259:   int    StringLength;
        -:  260:   int    DirMarkIdx;
        -:  261:   int32   ReturnCode;
        -:  262:   
       12:  263:   if ( OriginalPath == NULL || FileNameOnly == NULL )
        -:  264:   {
        3:  265:      ReturnCode = CFE_FS_BAD_ARGUMENT;
        -:  266:   }
        -:  267:   else
        -:  268:   {
        -:  269:      
        -:  270:       /*
        -:  271:       ** Get the string length of the original file path
        -:  272:       */
        6:  273:       StringLength = strlen(OriginalPath);
        -:  274:   
        -:  275:       /*
        -:  276:       ** Extract the filename from the Path
        -:  277:       */
        -:  278:    
        -:  279:       /* 
        -:  280:       ** Find the last '/' Character 
        -:  281:       */
        6:  282:       DirMarkIdx = -1;
      143:  283:       for ( i = 0; i < StringLength; i++ )
        -:  284:       {
      137:  285:          if ( OriginalPath[i] == '/' )
        -:  286:          {
        9:  287:             DirMarkIdx = i;
        -:  288:          }
        -:  289:       }
        -:  290:    
        -:  291:       /*
        -:  292:       ** Verify the filename isn't too long
        -:  293:       */
        6:  294:       if ((StringLength - (DirMarkIdx + 1)) < OS_MAX_PATH_LEN)
        -:  295:       {       
        -:  296:          /* 
        -:  297:          ** Extract the filename portion 
        -:  298:          */
        5:  299:          if ( DirMarkIdx > 0 )
        -:  300:          {    
        -:  301:             /* 
        -:  302:             ** Extract the filename portion 
        -:  303:             */
        4:  304:             j = 0;
       51:  305:             for ( i = DirMarkIdx + 1; i < StringLength; i++ )
        -:  306:             {
       47:  307:                FileNameOnly[j] = OriginalPath[i];
       47:  308:                j++;
        -:  309:             }
        4:  310:             FileNameOnly[j] = '\0';
        -:  311:    
        4:  312:             ReturnCode = CFE_SUCCESS;       
        -:  313:          }
        -:  314:          else
        -:  315:          { 
        1:  316:             ReturnCode = CFE_FS_INVALID_PATH;
        -:  317:          }
        -:  318:       }
        -:  319:       else 
        -:  320:       {
        1:  321:           ReturnCode = CFE_FS_FNAME_TOO_LONG;
        -:  322:       }
        -:  323:    }
        -:  324:   
        9:  325:    return(ReturnCode);
        -:  326:}
        -:  327:
        -:  328:
        -:  329:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  330:/*                                                                         */
        -:  331:/* Function: CFE_FS_BSPIsGzFile                                            */
        -:  332:/*                                                                         */
        -:  333:/*  This function will check to see if the file to load                    */
        -:  334:/*  is compressed with gzip. Currently it is based on the                  */
        -:  335:/*  file name. The file name must end in ".gz".                            */ 
        -:  336:/*                                                                         */
        -:  337:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        6:  338:boolean CFE_FS_IsGzFile(const char *FileName)
        -:  339:{
        -:  340:   size_t    StringLength;
        -:  341:   
        6:  342:   if ( FileName == NULL )
        -:  343:   {
        1:  344:      return(FALSE);
        -:  345:   }
        -:  346:   /*
        -:  347:   ** Get the string length of the SourceFile name
        -:  348:   */
        5:  349:   StringLength = strlen(FileName);
        -:  350:   
        -:  351:   /*
        -:  352:   ** The compressed filename must be named "something.gz"
        -:  353:   ** Because of that, the shortest compressed filename is "a.gz"
        -:  354:   ** Check for the length before determining if the file is zipped
        -:  355:   */
        5:  356:   if ( StringLength < 4 )
        -:  357:   {
        1:  358:      return(FALSE);
        -:  359:   }
        -:  360:
        -:  361:   /*
        -:  362:   ** if the last 3 characters are ".gz"
        -:  363:   ** Then assume the file is zipped.
        -:  364:   */
        9:  365:   if ( (FileName[StringLength - 3] == '.') &&
        3:  366:        (FileName[StringLength - 2] == 'g') &&
        2:  367:        (FileName[StringLength - 1] == 'z'))
        -:  368:   {
        1:  369:       return(TRUE);       
        -:  370:   }
        -:  371:   else
        -:  372:   {
        3:  373:       return(FALSE);
        -:  374:   }
        -:  375:  
        -:  376:}
        -:  377:
        -:  378:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  379:/*                                                                         */
        -:  380:/* Function: CFE_FS_GetUncompressedFile                                    */
        -:  381:/*                                                                         */
        -:  382:/*  Decompress a Loadable file to prepare for loading it                   */
        -:  383:/*                                                                         */
        -:  384:/*  A temporary filename on the ramdisk is generated, and the file is      */
        -:  385:/*  decompressed to it. The filename of the temporary file is output back  */
        -:  386:/*  to the caller.                                                         */
        -:  387:/*                                                                         */
        -:  388:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        4:  389:int32 CFE_FS_GetUncompressedFile(char *OutputNameBuffer, uint32 OutputNameBufferSize,
        -:  390:        const char *GzipFileName, const char *TempDir)
        -:  391:{
        -:  392:    char    FileNameOnly[OS_MAX_PATH_LEN];
        -:  393:    int32   Status;
        -:  394:    int     RequiredLen;    /* using "int" per snprintf API */
        -:  395:
        -:  396:    /*
        -:  397:    ** Extract the filename from the path
        -:  398:    */
        4:  399:    Status = CFE_FS_ExtractFilenameFromPath(GzipFileName, FileNameOnly);
        4:  400:    if ( Status != CFE_SUCCESS )
        -:  401:    {
        1:  402:       CFE_ES_WriteToSysLog("FS_GetUncompressedFile: Unable to extract filename from path: %s.\n",GzipFileName);
        -:  403:    }
        -:  404:    else
        -:  405:    {
        -:  406:        /*
        -:  407:        ** Build up the destination path in the RAM disk
        -:  408:        */
        3:  409:        RequiredLen = snprintf(OutputNameBuffer, OutputNameBufferSize,
        -:  410:                "%s/%s", TempDir, FileNameOnly);
        -:  411:
        -:  412:        /*
        -:  413:        ** Remove the ".gz" prefix from the filename
        -:  414:        ** (Any input file name to this function must have a .gz extension,
        -:  415:        ** i.e. it passed the CFE_FS_IsGzFile() test, of which .gz is the only possibility)
        -:  416:        */
        3:  417:        if (RequiredLen >= 3)
        -:  418:        {
        3:  419:            RequiredLen -= 3;
        -:  420:        }
        -:  421:
        -:  422:        /*
        -:  423:         * check if LoadNameBuffer got truncated
        -:  424:         * (snprintf returns the _required_ length, whether or not it actually fit)
        -:  425:         */
        4:  426:        if (RequiredLen < 0 || RequiredLen >= OutputNameBufferSize)
        -:  427:        {
        -:  428:            /* Can't include the name string since it could be too long for the message */
        1:  429:            CFE_ES_WriteToSysLog("FS_GetUncompressedFile: Temporary path plus file name length (%d) exceeds max allowed (%lu)\n",
        -:  430:                                 RequiredLen, (unsigned long)(OutputNameBufferSize-1));
        1:  431:            Status = CFE_FS_FNAME_TOO_LONG;
        -:  432:        }
        -:  433:        else
        -:  434:        {
        -:  435:            /*
        -:  436:             * Actually truncate the .gz from the string
        -:  437:             * (had to wait until after length verification)
        -:  438:             */
        2:  439:            OutputNameBuffer[RequiredLen] = 0;
        -:  440:
        -:  441:            /*
        -:  442:            ** Decompress the file:
        -:  443:            */
        2:  444:            Status =  CFE_FS_Decompress( GzipFileName, OutputNameBuffer );
        2:  445:            if ( Status != CFE_SUCCESS )
        -:  446:            {
        1:  447:                CFE_ES_WriteToSysLog("FS_GetUncompressedFile: Unable to decompress %s, error=%08lx\n",
        -:  448:                        GzipFileName, (unsigned long)Status);
        -:  449:            }
        -:  450:        }
        -:  451:    }
        -:  452:
        4:  453:    return Status;
        -:  454:}
        -:  455:
        -:  456:/************************/
        -:  457:/*  End of File Comment */
        -:  458:/************************/
