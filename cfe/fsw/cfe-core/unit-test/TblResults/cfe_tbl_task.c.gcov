        -:    0:Source:/home/mdeschu/cfe-660-ut/cfe/fsw/cfe-core/src/tbl/cfe_tbl_task.c
        -:    0:Programs:4
        -:    1:/*
        -:    2:** $Id: cfe_tbl_task.c 1.5 2012/01/18 16:32:58GMT-05:00 jmdagost Exp  $
        -:    3:**
        -:    4:**      Copyright (c) 2004-2012, United States government as represented by the 
        -:    5:**      administrator of the National Aeronautics Space Administration.  
        -:    6:**      All rights reserved. This software(cFE) was created at NASA's Goddard 
        -:    7:**      Space Flight Center pursuant to government contracts.
        -:    8:**
        -:    9:**      This is governed by the NASA Open Source Agreement and may be used, 
        -:   10:**      distributed and modified only pursuant to the terms of that agreement.
        -:   11:**  
        -:   12:** Subsystem: cFE TBL Task
        -:   13:**
        -:   14:** Author: David Kobe (the Hammers Company, Inc.)
        -:   15:**
        -:   16:** Notes:
        -:   17:**
        -:   18:*/
        -:   19:
        -:   20:
        -:   21:/*
        -:   22:** Required header files
        -:   23:*/
        -:   24:#include "private/cfe_private.h"
        -:   25:#include "cfe_version.h"
        -:   26:#include "cfe_tbl_internal.h"
        -:   27:#include "cfe_tbl_events.h"
        -:   28:#include "cfe_tbl_msg.h"
        -:   29:#include "cfe_tbl_task_cmds.h"
        -:   30:#include "cfe_tbl_verify.h"
        -:   31:#include "cfe_msgids.h"
        -:   32:#include <string.h>
        -:   33:
        -:   34:
        -:   35:/*
        -:   36:** Table task global data
        -:   37:*/
        -:   38:CFE_TBL_TaskData_t    CFE_TBL_TaskData;
        -:   39:
        -:   40:/*
        -:   41: * Macros to assist in building the CFE_TBL_CmdHandlerTbl -
        -:   42: *  For generic message entries, which only have a MID and a handler function (no command payload)
        -:   43: */
        -:   44:#define CFE_TBL_MESSAGE_ENTRY(mid,handlerfunc) \
        -:   45:        { mid, 0, sizeof(CCSDS_CommandPacket_t), (CFE_TBL_MsgProcFuncPtr_t)handlerfunc, CFE_TBL_MSG_MSGTYPE }
        -:   46:
        -:   47:/*
        -:   48: * Macros to assist in building the CFE_TBL_CmdHandlerTbl -
        -:   49: *  For command handler entries, which have a command code, payload type, and a handler function
        -:   50: */
        -:   51:#define CFE_TBL_COMMAND_ENTRY(ccode,paramtype,handlerfunc) \
        -:   52:        { CFE_TBL_CMD_MID, ccode, sizeof(paramtype), (CFE_TBL_MsgProcFuncPtr_t)handlerfunc, CFE_TBL_CMD_MSGTYPE }
        -:   53:
        -:   54:/* Constant Data */
        -:   55:
        -:   56:const CFE_TBL_CmdHandlerTblRec_t CFE_TBL_CmdHandlerTbl[] =
        -:   57:{
        -:   58:        /* message entries (SEND_HK) */
        -:   59:        CFE_TBL_MESSAGE_ENTRY(CFE_TBL_SEND_HK_MID,  CFE_TBL_HousekeepingCmd),
        -:   60:
        -:   61:        /* command entries (everything else) */
        -:   62:        CFE_TBL_COMMAND_ENTRY(          CFE_TBL_NOOP_CC,         CFE_TBL_Noop_t,         CFE_TBL_NoopCmd),
        -:   63:        CFE_TBL_COMMAND_ENTRY(CFE_TBL_RESET_COUNTERS_CC,CFE_TBL_ResetCounters_t,CFE_TBL_ResetCountersCmd),
        -:   64:        CFE_TBL_COMMAND_ENTRY(          CFE_TBL_LOAD_CC,         CFE_TBL_Load_t,         CFE_TBL_LoadCmd),
        -:   65:        CFE_TBL_COMMAND_ENTRY(          CFE_TBL_DUMP_CC,         CFE_TBL_Dump_t,         CFE_TBL_DumpCmd),
        -:   66:        CFE_TBL_COMMAND_ENTRY(      CFE_TBL_VALIDATE_CC,     CFE_TBL_Validate_t,     CFE_TBL_ValidateCmd),
        -:   67:        CFE_TBL_COMMAND_ENTRY(      CFE_TBL_ACTIVATE_CC,     CFE_TBL_Activate_t,     CFE_TBL_ActivateCmd),
        -:   68:        CFE_TBL_COMMAND_ENTRY( CFE_TBL_DUMP_REGISTRY_CC, CFE_TBL_DumpRegistry_t, CFE_TBL_DumpRegistryCmd),
        -:   69:        CFE_TBL_COMMAND_ENTRY( CFE_TBL_SEND_REGISTRY_CC, CFE_TBL_SendRegistry_t, CFE_TBL_SendRegistryCmd),
        -:   70:        CFE_TBL_COMMAND_ENTRY(    CFE_TBL_DELETE_CDS_CC,    CFE_TBL_DeleteCDS_t,    CFE_TBL_DeleteCDSCmd),
        -:   71:        CFE_TBL_COMMAND_ENTRY(    CFE_TBL_ABORT_LOAD_CC,    CFE_TBL_AbortLoad_t,    CFE_TBL_AbortLoadCmd),
        -:   72:
        -:   73:        /* list terminator (keep last) */
        -:   74:        {  0,   0,   0,  NULL, CFE_TBL_TERM_MSGTYPE }
        -:   75:};
        -:   76:
        -:   77:
        -:   78:/******************************************************************************/
        -:   79:
        2:   80:void CFE_TBL_TaskMain(void)
        -:   81:{
        -:   82:    int32  Status;
        -:   83:
        2:   84:    CFE_ES_PerfLogEntry(CFE_MISSION_TBL_MAIN_PERF_ID);
        -:   85:
        2:   86:    Status = CFE_TBL_TaskInit();
        -:   87:    
        2:   88:    if(Status != CFE_SUCCESS)
        -:   89:    {
        1:   90:      CFE_ES_WriteToSysLog("TBL:Application Init Failed,RC=0x%08X\n", (unsigned int)Status);
        1:   91:      CFE_ES_PerfLogExit(CFE_MISSION_TBL_MAIN_PERF_ID);      
        -:   92:      /* Note: CFE_ES_ExitApp will not return */
        1:   93:      CFE_ES_ExitApp(CFE_ES_RunStatus_CORE_APP_INIT_ERROR);
        -:   94:    }/* end if */
        -:   95:
        -:   96:    /*
        -:   97:     * Wait for other apps to start.
        -:   98:     * It is important that the core apps are present before this starts receiving
        -:   99:     * messages from the command pipe, as some of those handlers might depend on
        -:  100:     * the other core apps.
        -:  101:     */
        2:  102:    CFE_ES_WaitForSystemState(CFE_ES_SystemState_CORE_READY, CFE_PLATFORM_CORE_MAX_STARTUP_MSEC);
        -:  103:
        -:  104:    /* Main loop */
        6:  105:    while (Status == CFE_SUCCESS)
        -:  106:    {
        -:  107:        /* Increment the Main task Execution Counter */
        2:  108:        CFE_ES_IncrementTaskCounter();
        -:  109:
        2:  110:        CFE_ES_PerfLogExit(CFE_MISSION_TBL_MAIN_PERF_ID);
        -:  111:
        -:  112:        /* Pend on receipt of packet */
        2:  113:        Status = CFE_SB_RcvMsg( &CFE_TBL_TaskData.MsgPtr,
        2:  114:                                CFE_TBL_TaskData.CmdPipe,
        -:  115:                                CFE_SB_PEND_FOREVER);
        -:  116:
        2:  117:        CFE_ES_PerfLogEntry(CFE_MISSION_TBL_MAIN_PERF_ID);
        -:  118:
        2:  119:        if (Status == CFE_SUCCESS)
        -:  120:        {
        -:  121:            /* Process cmd pipe msg */
        1:  122:            CFE_TBL_TaskPipe(CFE_TBL_TaskData.MsgPtr);
        -:  123:        }else{
        1:  124:            CFE_ES_WriteToSysLog("TBL:Error reading cmd pipe,RC=0x%08X\n",(unsigned int)Status);
        -:  125:        }/* end if */
        -:  126:
        -:  127:    }/* end while */
        -:  128:
        -:  129:    /* while loop exits only if CFE_SB_RcvMsg returns error */
        2:  130:    CFE_ES_ExitApp(CFE_ES_RunStatus_CORE_APP_RUNTIME_ERROR);
        -:  131:
        2:  132:} /* end CFE_TBL_TaskMain() */
        -:  133:
        -:  134:
        -:  135:/******************************************************************************/
        -:  136:
        8:  137:int32 CFE_TBL_TaskInit(void)
        -:  138:{
        8:  139:    int32 Status = CFE_SUCCESS;
        -:  140:
        -:  141:    /*
        -:  142:    ** Register Table Services with ES
        -:  143:    */
        8:  144:    Status = CFE_ES_RegisterApp();
        -:  145:
        8:  146:    if(Status != CFE_SUCCESS)
        -:  147:    {
        1:  148:      CFE_ES_WriteToSysLog("TBL:Call to CFE_ES_RegisterApp Failed:RC=0x%08X\n",(unsigned int)Status);
        1:  149:      return Status;
        -:  150:    }/* end if */
        -:  151:    
        -:  152:    /*
        -:  153:    ** Initialize global Table Services data
        -:  154:    */
        7:  155:    CFE_TBL_InitData();
        -:  156:
        -:  157:    /*
        -:  158:    ** Register event filter table
        -:  159:    */
        7:  160:    Status = CFE_EVS_Register(NULL, 0, 0);
        -:  161:
        7:  162:    if(Status != CFE_SUCCESS)
        -:  163:    {
        1:  164:      CFE_ES_WriteToSysLog("TBL:Call to CFE_EVS_Register Failed:RC=0x%08X\n",(unsigned int)Status);
        1:  165:      return Status;
        -:  166:    }/* end if */
        -:  167:    
        -:  168:    /*
        -:  169:    ** Create Software Bus message pipe
        -:  170:    */
        6:  171:    Status = CFE_SB_CreatePipe(&CFE_TBL_TaskData.CmdPipe,
        6:  172:                                CFE_TBL_TaskData.PipeDepth,
        -:  173:                                CFE_TBL_TaskData.PipeName);
        6:  174:    if(Status != CFE_SUCCESS)
        -:  175:    {
        1:  176:      CFE_ES_WriteToSysLog("TBL:Error creating cmd pipe:RC=0x%08X\n",(unsigned int)Status);
        1:  177:      return Status;
        -:  178:    }/* end if */                                                                
        -:  179:
        -:  180:    /*
        -:  181:    ** Subscribe to Housekeeping request commands
        -:  182:    */
        5:  183:    Status = CFE_SB_Subscribe(CFE_TBL_SEND_HK_MID, CFE_TBL_TaskData.CmdPipe);
        -:  184:
        5:  185:    if(Status != CFE_SUCCESS)
        -:  186:    {
        1:  187:      CFE_ES_WriteToSysLog("TBL:Error subscribing to HK Request:RC=0x%08X\n",(unsigned int)Status);
        1:  188:      return Status;
        -:  189:    }/* end if */
        -:  190:
        -:  191:    /*
        -:  192:    ** Subscribe to Table task ground command packets
        -:  193:    */
        4:  194:    Status = CFE_SB_Subscribe(CFE_TBL_CMD_MID, CFE_TBL_TaskData.CmdPipe);
        -:  195:
        4:  196:    if(Status != CFE_SUCCESS)
        -:  197:    {
        1:  198:      CFE_ES_WriteToSysLog("TBL:Error subscribing to gnd cmds:RC=0x%08X\n",(unsigned int)Status);
        1:  199:      return Status;
        -:  200:    }/* end if */
        -:  201:    
        -:  202:    /*
        -:  203:    ** Task startup event message
        -:  204:    */
        3:  205:    Status = CFE_EVS_SendEvent(CFE_TBL_INIT_INF_EID, CFE_EVS_EventType_INFORMATION, "cFE TBL Initialized.  cFE Version %d.%d.%d.%d",
        -:  206:                               CFE_MAJOR_VERSION,CFE_MINOR_VERSION,CFE_REVISION,CFE_MISSION_REV);
        -:  207:
        3:  208:    if(Status != CFE_SUCCESS)
        -:  209:    {
        1:  210:      CFE_ES_WriteToSysLog("TBL:Error sending init event:RC=0x%08X\n",(unsigned int)Status);
        1:  211:      return Status;
        -:  212:    }/* end if */
        -:  213:
        2:  214:    return CFE_SUCCESS;
        -:  215:
        -:  216:} /* End of CFE_TBL_TaskInit() */
        -:  217:
        -:  218:
        -:  219:/******************************************************************************/
        -:  220:
        8:  221:void CFE_TBL_InitData(void)
        -:  222:{
        -:  223:    /* Initialize Counters */
        8:  224:    CFE_TBL_TaskData.CommandCounter = 0;
        8:  225:    CFE_TBL_TaskData.CommandErrorCounter = 0;
        8:  226:    CFE_TBL_TaskData.SuccessValCounter = 0;
        8:  227:    CFE_TBL_TaskData.FailedValCounter = 0;
        -:  228:
        -:  229:    /* Get the assigned Application ID for the Table Services Task */
        8:  230:    CFE_ES_GetAppID(&CFE_TBL_TaskData.TableTaskAppId);
        -:  231:
        -:  232:    /* Initialize Command Pipe Parameters */
        8:  233:    CFE_TBL_TaskData.PipeDepth = CFE_TBL_TASK_PIPE_DEPTH;
        8:  234:    strncpy(CFE_TBL_TaskData.PipeName, CFE_TBL_TASK_PIPE_NAME, 16);
        -:  235:
        -:  236:    /* Initialize Packet Headers */
        8:  237:    CFE_SB_InitMsg(&CFE_TBL_TaskData.HkPacket,
        -:  238:                   CFE_TBL_HK_TLM_MID,
        -:  239:                   sizeof(CFE_TBL_TaskData.HkPacket),
        -:  240:                   TRUE);
        -:  241:
        8:  242:    CFE_SB_InitMsg(&CFE_TBL_TaskData.TblRegPacket,
        -:  243:                   CFE_TBL_REG_TLM_MID,
        -:  244:                   sizeof(CFE_TBL_TaskData.TblRegPacket),
        -:  245:                   TRUE);
        -:  246:
        8:  247:} /* End of CFE_TBL_InitData() */
        -:  248:
        -:  249:
        -:  250:/******************************************************************************/
        -:  251:
       15:  252:void CFE_TBL_TaskPipe(CFE_SB_Msg_t *MessagePtr)
        -:  253:{
       15:  254:    CFE_SB_MsgId_t       MessageID = CFE_SB_GetMsgId(MessagePtr);
       15:  255:    uint16               CommandCode = CFE_SB_GetCmdCode(MessagePtr);
        -:  256:    int16                CmdIndx;
        -:  257:    uint32               ActualLength;
       15:  258:    CFE_TBL_CmdProcRet_t CmdStatus = CFE_TBL_INC_ERR_CTR; /* Assume a failed command */
        -:  259:
        -:  260:    /* Search the Command Handler Table for a matching message */
       15:  261:    CmdIndx = CFE_TBL_SearchCmdHndlrTbl(MessageID, CommandCode);
        -:  262:
        -:  263:    /* Check to see if a matching command was found */
       15:  264:    if (CmdIndx >= 0)
        -:  265:    {
        -:  266:        /* Verify Message Length before processing */
        4:  267:        ActualLength = CFE_SB_GetTotalMsgLength(MessagePtr);
        4:  268:        if (ActualLength == CFE_TBL_CmdHandlerTbl[CmdIndx].ExpectedLength)
        -:  269:        {
        -:  270:            /* All checks have passed, call the appropriate message handler */
        3:  271:            CmdStatus = (CFE_TBL_CmdHandlerTbl[CmdIndx].MsgProcFuncPtr)(MessagePtr);
        -:  272:        }
        -:  273:        else /* Bad Message Length */
        -:  274:        {
        1:  275:            CFE_EVS_SendEvent( CFE_TBL_LEN_ERR_EID, CFE_EVS_EventType_ERROR,
        -:  276:                               "Invalid msg length -- ID = 0x%04X, CC = %d, Len = %d (!= %d)",
        -:  277:                               (unsigned int)MessageID, (int)CommandCode, (int)ActualLength,
        -:  278:                               (int)CFE_TBL_CmdHandlerTbl[CmdIndx].ExpectedLength );
        -:  279:        }
        -:  280:
        -:  281:        /* Only update command counters when message has a command code */
        4:  282:        if (CFE_TBL_CmdHandlerTbl[CmdIndx].MsgTypes == CFE_TBL_CMD_MSGTYPE)
        -:  283:        {
        3:  284:            if (CmdStatus == CFE_TBL_INC_CMD_CTR)
        -:  285:            {
        1:  286:                CFE_TBL_TaskData.CommandCounter++;
        -:  287:            }
        2:  288:            else if (CmdStatus == CFE_TBL_INC_ERR_CTR)
        -:  289:            {
        1:  290:                CFE_TBL_TaskData.CommandErrorCounter++;
        -:  291:            }
        -:  292:        }
        -:  293:    }
        -:  294:    else
        -:  295:    {
        -:  296:        /* Determine whether event message should be */
        -:  297:        /* "Bad Command Code" or "Bad Message ID"    */
       11:  298:        if (CmdIndx == CFE_TBL_BAD_CMD_CODE)
        -:  299:        {
        1:  300:            CFE_EVS_SendEvent(CFE_TBL_CC1_ERR_EID, CFE_EVS_EventType_ERROR,
        -:  301:                              "Invalid command code -- ID = 0x%04X, CC = %d",
        -:  302:                              (unsigned int)MessageID, (int)CommandCode);
        -:  303:
        -:  304:            /* Update the command error counter */
        1:  305:            CFE_TBL_TaskData.CommandErrorCounter++;
        -:  306:        }
        -:  307:        else  /* CmdIndx == CFE_TBL_BAD_MSG_ID */
        -:  308:        {
       10:  309:            CFE_EVS_SendEvent(CFE_TBL_MID_ERR_EID, CFE_EVS_EventType_ERROR,
        -:  310:                             "Invalid message ID -- ID = 0x%04X",
        -:  311:                              (unsigned int)MessageID);
        -:  312:            /*
        -:  313:            ** Note: we only increment the command error counter when
        -:  314:            **    processing messages with command codes
        -:  315:            */
        -:  316:        }
        -:  317:    }
        -:  318:
       15:  319:    return;
        -:  320:
        -:  321:} /* End of CFE_TBL_TaskPipe() */
        -:  322:
        -:  323:
        -:  324:/******************************************************************************/
        -:  325:
       19:  326:int16 CFE_TBL_SearchCmdHndlrTbl( CFE_SB_MsgId_t MessageID, uint16 CommandCode )
        -:  327:{
       19:  328:    int16     TblIndx = CFE_TBL_BAD_CMD_CODE;
       19:  329:    boolean   FoundMsg = FALSE;
       19:  330:    boolean   FoundMatch = FALSE;
        -:  331:
        -:  332:    do
        -:  333:    {
        -:  334:        /* Point to next entry in Command Handler Table */
      167:  335:        TblIndx++;
        -:  336:
        -:  337:        /* Check to see if we found a matching Message ID */
      197:  338:        if ((CFE_TBL_CmdHandlerTbl[TblIndx].MsgId == MessageID) &&
       30:  339:            (CFE_TBL_CmdHandlerTbl[TblIndx].MsgTypes != CFE_TBL_TERM_MSGTYPE))
        -:  340:        {
        -:  341:            /* Flag any found message IDs so that if there is an error,        */
        -:  342:            /* we can determine if it was a bad message ID or bad command code */
       27:  343:            FoundMsg = TRUE;
        -:  344:
        -:  345:            /* If entry in the Command Handler Table is a command entry, */
        -:  346:            /* then check for a matching command code                    */
       27:  347:            if (CFE_TBL_CmdHandlerTbl[TblIndx].MsgTypes == CFE_TBL_CMD_MSGTYPE)
        -:  348:            {
       25:  349:                if (CFE_TBL_CmdHandlerTbl[TblIndx].CmdCode == CommandCode)
        -:  350:                {
        -:  351:                    /* Found matching message ID and Command Code */
        4:  352:                    FoundMatch = TRUE;
        -:  353:                }
        -:  354:            }
        -:  355:            else /* Message is not a command message with specific command code */
        -:  356:            {
        -:  357:                /* Automatically assume a match when legit */
        -:  358:                /* Message ID is all that is required      */
        2:  359:                FoundMatch = TRUE;
        -:  360:            }
        -:  361:        }
      167:  362:    } while ((!FoundMatch) && (CFE_TBL_CmdHandlerTbl[TblIndx].MsgTypes != CFE_TBL_TERM_MSGTYPE));
        -:  363:
        -:  364:    /* If we failed to find a match, return a negative index */
       19:  365:    if (!FoundMatch)
        -:  366:    {
        -:  367:        /* Determine if the message ID was bad or the command code */
       13:  368:        if (FoundMsg)
        -:  369:        {
        -:  370:            /* A matching message ID was found, so the command code must be bad */
        2:  371:            TblIndx = CFE_TBL_BAD_CMD_CODE;
        -:  372:        }
        -:  373:        else /* No matching message ID was found */
        -:  374:        {
       11:  375:            TblIndx = CFE_TBL_BAD_MSG_ID;
        -:  376:        }
        -:  377:    }
        -:  378:
       19:  379:    return TblIndx;
        -:  380:}   /* End of CFE_TBL_SearchCmdHndlrTbl() */
        -:  381:
        -:  382:
        -:  383:/************************/
        -:  384:/*  End of File Comment */
        -:  385:/************************/
        -:  386:
