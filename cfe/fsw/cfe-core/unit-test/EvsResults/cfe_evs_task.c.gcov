        -:    0:Source:/home/mdeschu/cfe-660-ut/cfe/fsw/cfe-core/src/evs/cfe_evs_task.c
        -:    0:Programs:4
        -:    1:/*
        -:    2:**
        -:    3:**  File Name: cfe_evs_task.c
        -:    4:**  $Id: cfe_evs_task.c 1.19 2014/08/22 16:53:24GMT-05:00 lwalling Exp  $
        -:    5:**
        -:    6:**      Copyright (c) 2004-2012, United States government as represented by the
        -:    7:**      administrator of the National Aeronautics Space Administration.
        -:    8:**      All rights reserved. This software(cFE) was created at NASA's Goddard
        -:    9:**      Space Flight Center pursuant to government contracts.
        -:   10:**
        -:   11:**      This is governed by the NASA Open Source Agreement and may be used,
        -:   12:**      distributed and modified only pursuant to the terms of that agreement.
        -:   13:**
        -:   14:**  Title: Event Service API Management Control Interfaces
        -:   15:**
        -:   16:**  Purpose: This module defines the top level functions of the
        -:   17:**           cFE Event Service task defining the control, command,
        -:   18:**           and telemetry interfaces
        -:   19:**
        -:   20:*/
        -:   21:
        -:   22:/* Include Files */
        -:   23:#include "cfe_evs_task.h"       /* EVS internal definitions */
        -:   24:#include "cfe_evs_log.h"        /* EVS log file definitions */
        -:   25:#include "cfe_evs_utils.h"      /* EVS utility function definitions */
        -:   26:#include "cfe_evs.h"            /* EVS API definitions */
        -:   27:
        -:   28:#include <string.h>
        -:   29:
        -:   30:#include "cfe_version.h"      /* cFE version definitions */
        -:   31:#include "cfe_error.h"        /* cFE error code definitions */
        -:   32:#include "cfe_es.h"           /* Executive Service definitions */
        -:   33:#include "cfe_fs.h"           /* File Service definitions */
        -:   34:#include "cfe_psp.h"          /* cFE Platform Support Package definitions */
        -:   35:#include "osapi.h"            /* OS API file system definitions */
        -:   36:
        -:   37:#include "private/cfe_es_resetdata_typedef.h"  /* Definition of CFE_ES_ResetData_t */
        -:   38:
        -:   39:/* Global Data */
        -:   40:CFE_EVS_GlobalData_t CFE_EVS_GlobalData;
        -:   41:
        -:   42:
        -:   43:/*
        -:   44:** Local function prototypes.
        -:   45:*/
        -:   46:void  CFE_EVS_ProcessGroundCommand ( CFE_SB_MsgPtr_t EVS_MsgPtr );
        -:   47:boolean CFE_EVS_VerifyCmdLength(CFE_SB_MsgPtr_t Msg, uint16 ExpectedLength);
        -:   48:
        -:   49:/* Function Definitions */
        -:   50:
        -:   51:
        -:   52:/*
        -:   53:**             Function Prologue
        -:   54:**
        -:   55:** Function Name:      CFE_EVS_EarlyInit
        -:   56:**
        -:   57:** Purpose:  This routine provides initialization for the EVS API.
        -:   58:**
        -:   59:** Assumptions and Notes: This routine must be called before the EVS
        -:   60:**      application is started.  CFE_EVS_EarlyInit performs initialization
        -:   61:**      necessary to support EVS API calls that might occur before
        -:   62:**      the EVS application has completed its startup initialization.
        -:   63:*/
        8:   64:int32 CFE_EVS_EarlyInit ( void )
        -:   65:{
        -:   66:
        -:   67:#ifdef CFE_PLATFORM_EVS_LOG_ON
        -:   68:
        -:   69:   int32                Status;
        8:   70:   uint32               resetAreaSize = 0;
        -:   71:   cpuaddr              resetAreaAddr;
        8:   72:   CFE_ES_ResetData_t  *CFE_EVS_ResetDataPtr = (CFE_ES_ResetData_t *) NULL;
        -:   73:
        -:   74:#endif
        -:   75:
        8:   76:   memset(&CFE_EVS_GlobalData, 0, sizeof(CFE_EVS_GlobalData_t));
        -:   77:
        8:   78:   CFE_EVS_GlobalData.EVS_AppID = CFE_EVS_UNDEF_APPID;
        -:   79:
        -:   80:   /* Initialize housekeeping packet */
        8:   81:   CFE_SB_InitMsg(&CFE_EVS_GlobalData.EVS_TlmPkt, CFE_EVS_HK_TLM_MID,
        -:   82:           sizeof(CFE_EVS_GlobalData.EVS_TlmPkt), FALSE);
        -:   83:  
        -:   84:   /* Elements stored in the hk packet that have non-zero default values */
        8:   85:   CFE_EVS_GlobalData.EVS_TlmPkt.Payload.MessageFormatMode = CFE_PLATFORM_EVS_DEFAULT_MSG_FORMAT_MODE;
        8:   86:   CFE_EVS_GlobalData.EVS_TlmPkt.Payload.OutputPort = CFE_PLATFORM_EVS_PORT_DEFAULT;
        8:   87:   CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogFullFlag = FALSE;
        8:   88:   CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogMode = CFE_PLATFORM_EVS_DEFAULT_LOG_MODE;
        -:   89:
        -:   90:#ifdef CFE_PLATFORM_EVS_LOG_ON
        -:   91:
        -:   92:   /* Get a pointer to the CFE reset area from the BSP */
        8:   93:   Status = CFE_PSP_GetResetArea(&resetAreaAddr, &resetAreaSize);
        -:   94:
        8:   95:   if (Status != CFE_PSP_SUCCESS)
        -:   96:   {
        1:   97:      CFE_ES_WriteToSysLog("EVS call to CFE_PSP_GetResetArea failed, RC=0x%08x\n", (unsigned int)Status);
        -:   98:   }
        7:   99:   else if (resetAreaSize < sizeof(CFE_ES_ResetData_t))
        -:  100:   {
        -:  101:      /* Got the pointer but the size is wrong */
        1:  102:      Status = CFE_EVS_RESET_AREA_POINTER;
        1:  103:      CFE_ES_WriteToSysLog("Unexpected size from CFE_PSP_GetResetArea: expected = 0x%08lX, actual = 0x%08lX\n",
        -:  104:                            (unsigned long)sizeof(CFE_ES_ResetData_t), (unsigned long)resetAreaSize);
        -:  105:   }
        -:  106:   else
        -:  107:   {
        6:  108:      CFE_EVS_ResetDataPtr = (CFE_ES_ResetData_t *)resetAreaAddr;
        -:  109:      /* Save pointer to the EVS portion of the CFE reset area */
        6:  110:      CFE_EVS_GlobalData.EVS_LogPtr = &CFE_EVS_ResetDataPtr->EVS_Log;
        -:  111:
        -:  112:      /* Create semaphore to serialize access to event log */
        6:  113:      Status = OS_MutSemCreate(&CFE_EVS_GlobalData.EVS_SharedDataMutexID, "CFE_EVS_DataMutex", 0);
        -:  114:
        6:  115:      if (Status != OS_SUCCESS)
        -:  116:      {
        1:  117:         CFE_ES_WriteToSysLog("EVS call to OS_MutSemCreate failed, RC=0x%08x\n", (unsigned int)Status);
        -:  118:      }
        -:  119:      else
        -:  120:      {
        -:  121:         /* Enable access to the EVS event log */                                                            
        5:  122:         CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogEnabled = TRUE;
        -:  123:
        -:  124:         /* Clear event log if power-on reset or bad contents */                                                            
        5:  125:         if (CFE_ES_GetResetType(NULL) == CFE_PSP_RST_TYPE_POWERON)                                                                   
        -:  126:         {
        1:  127:            CFE_ES_WriteToSysLog("Event Log cleared following power-on reset\n");
        1:  128:            EVS_ClearLog();                                                                                         
        1:  129:            CFE_EVS_GlobalData.EVS_LogPtr->LogMode = CFE_PLATFORM_EVS_DEFAULT_LOG_MODE;
        -:  130:         }
       17:  131:         else if (((CFE_EVS_GlobalData.EVS_LogPtr->LogMode != CFE_EVS_LogMode_OVERWRITE) &&
        3:  132:                   (CFE_EVS_GlobalData.EVS_LogPtr->LogMode != CFE_EVS_LogMode_DISCARD))  ||
        3:  133:                  ((CFE_EVS_GlobalData.EVS_LogPtr->LogFullFlag != FALSE)   &&
        2:  134:                   (CFE_EVS_GlobalData.EVS_LogPtr->LogFullFlag != TRUE))   ||
        2:  135:                   (CFE_EVS_GlobalData.EVS_LogPtr->Next >= CFE_PLATFORM_EVS_LOG_MAX))
        -:  136:         {
       15:  137:            CFE_ES_WriteToSysLog("Event Log cleared, n=%d, c=%d, f=%d, m=%d, o=%d\n",
        3:  138:                                  (int)CFE_EVS_GlobalData.EVS_LogPtr->Next,
        3:  139:                                  (int)CFE_EVS_GlobalData.EVS_LogPtr->LogCount,
        3:  140:                                  (int)CFE_EVS_GlobalData.EVS_LogPtr->LogFullFlag,
        3:  141:                                  (int)CFE_EVS_GlobalData.EVS_LogPtr->LogMode,
        3:  142:                                  (int)CFE_EVS_GlobalData.EVS_LogPtr->LogOverflowCounter);
        3:  143:            EVS_ClearLog();                                                                                         
        3:  144:            CFE_EVS_GlobalData.EVS_LogPtr->LogMode = CFE_PLATFORM_EVS_DEFAULT_LOG_MODE;
        -:  145:         }
        -:  146:         else
        -:  147:         {
        5:  148:            CFE_ES_WriteToSysLog("Event Log restored, n=%d, c=%d, f=%d, m=%d, o=%d\n",
        1:  149:                                  (int)CFE_EVS_GlobalData.EVS_LogPtr->Next,
        1:  150:                                  (int)CFE_EVS_GlobalData.EVS_LogPtr->LogCount,
        1:  151:                                  (int)CFE_EVS_GlobalData.EVS_LogPtr->LogFullFlag,
        1:  152:                                  (int)CFE_EVS_GlobalData.EVS_LogPtr->LogMode,
        1:  153:                                  (int)CFE_EVS_GlobalData.EVS_LogPtr->LogOverflowCounter);
        -:  154:         }
        -:  155:      }
        -:  156:   }
        -:  157:
        -:  158:#endif
        -:  159:
        8:  160:   return(CFE_SUCCESS);
        -:  161:
        -:  162:} /* End CFE_EVS_EarlyInit */
        -:  163:
        -:  164:
        -:  165:/*
        -:  166:**             Function Prologue
        -:  167:**
        -:  168:** Function Name:      CFE_EVS_CleanUpApp
        -:  169:**
        -:  170:** Purpose:  ES calls this routine when an app is being terminated.
        -:  171:**
        -:  172:** Assumptions and Notes:
        -:  173:*/
        3:  174:int32 CFE_EVS_CleanUpApp(uint32 AppID)
        -:  175:{
        3:  176:   int32  Status = CFE_SUCCESS;
        -:  177:
        3:  178:   if (AppID >= CFE_PLATFORM_ES_MAX_APPLICATIONS)
        -:  179:   {
        1:  180:      Status = CFE_EVS_APP_ILLEGAL_APP_ID;
        -:  181:   }
        2:  182:   else if (CFE_EVS_GlobalData.AppData[AppID].RegisterFlag == TRUE)
        -:  183:   {
        -:  184:      /* Same cleanup as CFE_EVS_Unregister() */
        1:  185:      memset(&CFE_EVS_GlobalData.AppData[AppID], 0, sizeof(EVS_AppData_t));
        -:  186:   }
        -:  187:    
        3:  188:   return(Status);
        -:  189:}
        -:  190:
        -:  191:
        -:  192:/*
        -:  193:**             Function Prologue
        -:  194:**
        -:  195:** Function Name:      EVS_TaskMain
        -:  196:**
        -:  197:** Purpose:  This is the main EVS task process loop.
        -:  198:**
        -:  199:** Assumptions and Notes:
        -:  200:**
        -:  201:*/
        2:  202:void CFE_EVS_TaskMain(void)
        -:  203:{
        -:  204:    int32 Status;    
        -:  205:    CFE_SB_MsgPtr_t    EVS_MsgPtr; /* Pointer to SB message */
        -:  206:
        2:  207:    CFE_ES_PerfLogEntry(CFE_MISSION_EVS_MAIN_PERF_ID);    
        -:  208:   
        2:  209:    Status = CFE_EVS_TaskInit();
        -:  210:    
        2:  211:    if(Status != CFE_SUCCESS)
        -:  212:    {
        1:  213:      CFE_ES_WriteToSysLog("EVS:Application Init Failed,RC=0x%08X\n", (unsigned int)Status);
        1:  214:      CFE_ES_PerfLogExit(CFE_MISSION_EVS_MAIN_PERF_ID);
        -:  215:      /* Note: CFE_ES_ExitApp will not return */
        1:  216:      CFE_ES_ExitApp(CFE_ES_RunStatus_CORE_APP_INIT_ERROR);
        -:  217:    }/* end if */      
        -:  218:
        -:  219:    /*
        -:  220:     * Wait for other apps to start.
        -:  221:     * It is important that the core apps are present before this starts receiving
        -:  222:     * messages from the command pipe, as some of those handlers might depend on
        -:  223:     * the other core apps.
        -:  224:     */
        2:  225:    CFE_ES_WaitForSystemState(CFE_ES_SystemState_CORE_READY, CFE_PLATFORM_CORE_MAX_STARTUP_MSEC);
        -:  226:
        -:  227:    /* Main loop */
        6:  228:    while (Status == CFE_SUCCESS)
        -:  229:    {
        -:  230:        /* Increment the Main task Execution Counter */
        2:  231:        CFE_ES_IncrementTaskCounter();
        -:  232:    
        2:  233:        CFE_ES_PerfLogExit(CFE_MISSION_EVS_MAIN_PERF_ID);
        -:  234:
        -:  235:        /* Pend on receipt of packet */
        2:  236:        Status = CFE_SB_RcvMsg(&EVS_MsgPtr, 
        2:  237:                               CFE_EVS_GlobalData.EVS_CommandPipe, 
        -:  238:                               CFE_SB_PEND_FOREVER);
        -:  239:
        2:  240:        CFE_ES_PerfLogEntry(CFE_MISSION_EVS_MAIN_PERF_ID);
        -:  241:
        2:  242:        if (Status == CFE_SUCCESS)
        -:  243:        {
        -:  244:            /* Process cmd pipe msg */
        1:  245:            CFE_EVS_ProcessCommandPacket(EVS_MsgPtr);
        -:  246:        }else{            
        1:  247:            CFE_ES_WriteToSysLog("EVS:Error reading cmd pipe,RC=0x%08X\n",(unsigned int)Status);
        -:  248:        }/* end if */
        -:  249:    
        -:  250:    }/* end while */
        -:  251:
        -:  252:    /* while loop exits only if CFE_SB_RcvMsg returns error */
        2:  253:    CFE_ES_ExitApp(CFE_ES_RunStatus_CORE_APP_RUNTIME_ERROR);
        -:  254:
        2:  255:} /* end CFE_EVS_TaskMain */
        -:  256:
        -:  257:
        -:  258:
        -:  259:/*
        -:  260:**             Function Prologue
        -:  261:**
        -:  262:** Function Name:      CFE_EVS_TaskInit
        -:  263:**
        -:  264:** Purpose:  This function performs any necessary EVS task initialization.
        -:  265:**
        -:  266:** Assumptions and Notes:
        -:  267:**
        -:  268:*/
        8:  269:int32 CFE_EVS_TaskInit ( void )
        -:  270:{
        -:  271:   int32 Status;
        -:  272:   uint32 AppID;
        -:  273: 
        -:  274:   /* Register EVS application */
        8:  275:   Status = CFE_ES_RegisterApp();
        8:  276:   if (Status != CFE_SUCCESS)
        -:  277:   {
        2:  278:      CFE_ES_WriteToSysLog("EVS:Call to CFE_ES_RegisterApp Failed:RC=0x%08X\n",(unsigned int)Status);
        2:  279:      return Status;
        -:  280:   }
        -:  281:
        -:  282:   /* Query and verify the EVS AppID */
        6:  283:   Status = EVS_GetAppID(&AppID);
        6:  284:   if (Status != CFE_SUCCESS)
        -:  285:   {
        1:  286:      CFE_ES_WriteToSysLog("EVS:Call to CFE_ES_GetAppID Failed:RC=0x%08X\n",(unsigned int)Status);
        1:  287:      return Status;
        -:  288:   }
        -:  289:
        -:  290:   /* Register EVS task for event services */
        5:  291:   Status = CFE_EVS_Register(NULL, 0, CFE_EVS_EventFilter_BINARY);
        5:  292:   if (Status != CFE_SUCCESS)
        -:  293:   {
    #####:  294:      CFE_ES_WriteToSysLog("EVS:Call to CFE_EVS_Register Failed:RC=0x%08X\n",(unsigned int)Status);
    #####:  295:      return Status;
        -:  296:   }
        -:  297:    
        -:  298:   /* Create software bus command pipe */
        5:  299:   Status = CFE_SB_CreatePipe(&CFE_EVS_GlobalData.EVS_CommandPipe,
        -:  300:                               CFE_EVS_PIPE_DEPTH, CFE_EVS_PIPE_NAME);
        5:  301:   if (Status != CFE_SUCCESS)
        -:  302:   {
        1:  303:      CFE_ES_WriteToSysLog("EVS:Call to CFE_SB_CreatePipe Failed:RC=0x%08X\n",(unsigned int)Status);
        1:  304:      return Status;
        -:  305:   }
        -:  306:      
        -:  307:   /* Subscribe to command and telemetry requests coming in on the command pipe */
        4:  308:   Status = CFE_SB_SubscribeEx(CFE_EVS_CMD_MID, CFE_EVS_GlobalData.EVS_CommandPipe,
        -:  309:                               CFE_SB_Default_Qos, CFE_EVS_MSG_LIMIT);
        4:  310:   if (Status != CFE_SUCCESS)
        -:  311:   {
        1:  312:      CFE_ES_WriteToSysLog("EVS:Subscribing to Cmds Failed:RC=0x%08X\n",(unsigned int)Status);
        1:  313:      return Status;
        -:  314:   }
        -:  315:  
        3:  316:   Status = CFE_SB_SubscribeEx(CFE_EVS_SEND_HK_MID, CFE_EVS_GlobalData.EVS_CommandPipe,
        -:  317:                               CFE_SB_Default_Qos, CFE_EVS_MSG_LIMIT);
        3:  318:   if (Status != CFE_SUCCESS)
        -:  319:   {
        1:  320:      CFE_ES_WriteToSysLog("EVS:Subscribing to HK Request Failed:RC=0x%08X\n",(unsigned int)Status);
        1:  321:      return Status;
        -:  322:   }
        -:  323:  
        -:  324:   /* Write the AppID to the global location, now that the rest of initialization is done */
        2:  325:   CFE_EVS_GlobalData.EVS_AppID = AppID;
        2:  326:   EVS_SendEvent(CFE_EVS_STARTUP_EID, CFE_EVS_EventType_INFORMATION, "cFE EVS Initialized. cFE Version %d.%d.%d.%d",
        -:  327:                 CFE_MAJOR_VERSION,CFE_MINOR_VERSION,CFE_REVISION,CFE_MISSION_REV);
        -:  328:
        2:  329:   return CFE_SUCCESS;
        -:  330:
        -:  331:} /* End CFE_EVS_TaskInit */
        -:  332:
        -:  333:
        -:  334:
        -:  335:/*
        -:  336:**             Function Prologue
        -:  337:**
        -:  338:** Function Name:      CFE_EVS_ProcessCommandPacket
        -:  339:**
        -:  340:** Purpose:  This function processes packets received on the EVS command pipe.
        -:  341:**
        -:  342:** Assumptions and Notes:
        -:  343:**
        -:  344:*/
      129:  345:void CFE_EVS_ProcessCommandPacket ( CFE_SB_MsgPtr_t EVS_MsgPtr )
        -:  346:{
        -:  347:    /* Process all SB messages */
      129:  348:    switch (CFE_SB_GetMsgId(EVS_MsgPtr))
        -:  349:    {
        -:  350:        case CFE_EVS_CMD_MID:
        -:  351:            /* EVS task specific command */
      125:  352:            CFE_EVS_ProcessGroundCommand(EVS_MsgPtr);
      125:  353:            break;
        -:  354:
        -:  355:        case CFE_EVS_SEND_HK_MID:
        -:  356:            /* Housekeeping request */
        2:  357:            CFE_EVS_ReportHousekeepingCmd((CCSDS_CommandPacket_t*)EVS_MsgPtr);
        2:  358:            break;
        -:  359:
        -:  360:        default:
        -:  361:            /* Unknown command -- should never occur */
        2:  362:            CFE_EVS_GlobalData.EVS_TlmPkt.Payload.CommandErrorCounter++;
        2:  363:            EVS_SendEvent(CFE_EVS_ERR_MSGID_EID, CFE_EVS_EventType_ERROR,
        -:  364:                         "Invalid command packet, Message ID = 0x%08X",
        -:  365:                          (unsigned int)CFE_SB_GetMsgId(EVS_MsgPtr));
        -:  366:            break;
        -:  367:    }
        -:  368:
      129:  369:    return;
        -:  370:
        -:  371:} /* End CFE_EVS_ProcessCommandPacket */
        -:  372:
        -:  373:
        -:  374:/*
        -:  375:**             Function Prologue
        -:  376:**
        -:  377:** Function Name:      CFE_EVS_ProcessGroundCommand
        -:  378:**
        -:  379:** Purpose:  This function processes a command, verifying that it is valid and of
        -:  380:**           proper length.
        -:  381:**
        -:  382:** Assumptions and Notes:
        -:  383:**
        -:  384:*/
      125:  385:void CFE_EVS_ProcessGroundCommand ( CFE_SB_MsgPtr_t EVS_MsgPtr )
        -:  386:{
        -:  387:   /* status will get reset if it passes length check */
      125:  388:   int32 Status = CFE_STATUS_WRONG_MSG_LENGTH;
        -:  389:
        -:  390:   /* Process "known" EVS task ground commands */
      125:  391:   switch (CFE_SB_GetCmdCode(EVS_MsgPtr))
        -:  392:   {
        -:  393:      case CFE_EVS_NOOP_CC:
        -:  394:
        2:  395:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_Noop_t)))
        -:  396:         {
        1:  397:            Status = CFE_EVS_NoopCmd((CFE_EVS_Noop_t*)EVS_MsgPtr);
        -:  398:         }
        2:  399:         break;
        -:  400:
        -:  401:      case CFE_EVS_RESET_COUNTERS_CC:
        -:  402:
        2:  403:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_ResetCounters_t)))
        -:  404:         {
        1:  405:            Status = CFE_EVS_ResetCountersCmd((CFE_EVS_ResetCounters_t*)EVS_MsgPtr);
        -:  406:         }
        2:  407:         break;
        -:  408:
        -:  409:      case CFE_EVS_ENABLE_EVENT_TYPE_CC:
        -:  410:
        4:  411:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_EnableEventType_t)))
        -:  412:         {
        3:  413:             Status = CFE_EVS_EnableEventTypeCmd((CFE_EVS_EnableEventType_t*)EVS_MsgPtr);
        -:  414:         }
        4:  415:         break;
        -:  416:
        -:  417:      case CFE_EVS_DISABLE_EVENT_TYPE_CC:
        -:  418:
        4:  419:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_DisableEventType_t)))
        -:  420:         {
        3:  421:             Status = CFE_EVS_DisableEventTypeCmd((CFE_EVS_DisableEventType_t*)EVS_MsgPtr);
        -:  422:         }
        4:  423:         break;
        -:  424:
        -:  425:      case CFE_EVS_SET_EVENT_FORMAT_MODE_CC:
        -:  426:
        4:  427:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_SetEventFormatMode_t)))
        -:  428:         {
        3:  429:             Status = CFE_EVS_SetEventFormatModeCmd((CFE_EVS_SetEventFormatMode_t*)EVS_MsgPtr);
        -:  430:         }
        4:  431:         break;
        -:  432:
        -:  433:      case CFE_EVS_ENABLE_APP_EVENT_TYPE_CC:
        -:  434:
       13:  435:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_EnableAppEventType_t)))
        -:  436:         {
       12:  437:             Status = CFE_EVS_EnableAppEventTypeCmd((CFE_EVS_EnableAppEventType_t*)EVS_MsgPtr);
        -:  438:         }
       13:  439:         break;
        -:  440:
        -:  441:      case CFE_EVS_DISABLE_APP_EVENT_TYPE_CC:
        -:  442:
        8:  443:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_DisableAppEventType_t)))
        -:  444:         {
        7:  445:             Status = CFE_EVS_DisableAppEventTypeCmd((CFE_EVS_DisableAppEventType_t*)EVS_MsgPtr);
        -:  446:         }
        8:  447:         break;
        -:  448:
        -:  449:      case CFE_EVS_ENABLE_APP_EVENTS_CC:
        -:  450:
        5:  451:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_EnableAppEvents_t)))
        -:  452:         {
        4:  453:             Status = CFE_EVS_EnableAppEventsCmd((CFE_EVS_EnableAppEvents_t*)EVS_MsgPtr);
        -:  454:         }
        5:  455:         break;
        -:  456:
        -:  457:      case CFE_EVS_DISABLE_APP_EVENTS_CC:
        -:  458:
        5:  459:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_DisableAppEvents_t)))
        -:  460:         {
        4:  461:             Status = CFE_EVS_DisableAppEventsCmd((CFE_EVS_DisableAppEvents_t*)EVS_MsgPtr);
        -:  462:         }
        5:  463:         break;
        -:  464:
        -:  465:      case CFE_EVS_RESET_APP_COUNTER_CC:
        -:  466:
        5:  467:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_ResetAppCounter_t)))
        -:  468:         {
        4:  469:             Status = CFE_EVS_ResetAppCounterCmd((CFE_EVS_ResetAppCounter_t*)EVS_MsgPtr);
        -:  470:         }
        5:  471:         break;
        -:  472:
        -:  473:      case CFE_EVS_SET_FILTER_CC:
        -:  474:
        6:  475:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, (uint16) sizeof(CFE_EVS_SetFilter_t)))
        -:  476:         {
        5:  477:             Status = CFE_EVS_SetFilterCmd((CFE_EVS_SetFilter_t*)EVS_MsgPtr);
        -:  478:         }
        6:  479:         break;
        -:  480:
        -:  481:      case CFE_EVS_ENABLE_PORTS_CC:
        -:  482:
        6:  483:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_EnablePorts_t)))
        -:  484:         {
        5:  485:             Status = CFE_EVS_EnablePortsCmd((CFE_EVS_EnablePorts_t*)EVS_MsgPtr);
        -:  486:         }
        6:  487:         break;
        -:  488:
        -:  489:      case CFE_EVS_DISABLE_PORTS_CC:
        -:  490:
        7:  491:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_DisablePorts_t)))
        -:  492:         {
        6:  493:             Status = CFE_EVS_DisablePortsCmd((CFE_EVS_DisablePorts_t*)EVS_MsgPtr);
        -:  494:         }
        7:  495:         break;
        -:  496:
        -:  497:      case CFE_EVS_RESET_FILTER_CC:
        -:  498:
        6:  499:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_ResetFilter_t)))
        -:  500:         {
        5:  501:             Status = CFE_EVS_ResetFilterCmd((CFE_EVS_ResetFilter_t*)EVS_MsgPtr);
        -:  502:         }
        6:  503:         break;
        -:  504:
        -:  505:      case CFE_EVS_RESET_ALL_FILTERS_CC:
        -:  506:
        6:  507:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_ResetAllFilters_t)))
        -:  508:         {
        5:  509:             Status = CFE_EVS_ResetAllFiltersCmd((CFE_EVS_ResetAllFilters_t*)EVS_MsgPtr);
        -:  510:         }
        6:  511:         break;
        -:  512:
        -:  513:      case CFE_EVS_ADD_EVENT_FILTER_CC:
        -:  514:
       17:  515:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_AddEventFilter_t)))
        -:  516:         {
       16:  517:             Status = CFE_EVS_AddEventFilterCmd((CFE_EVS_AddEventFilter_t*)EVS_MsgPtr);
        -:  518:         }
       17:  519:         break;
        -:  520:
        -:  521:      case CFE_EVS_DELETE_EVENT_FILTER_CC:
        -:  522:
        7:  523:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_DeleteEventFilter_t)))
        -:  524:         {
        6:  525:             Status = CFE_EVS_DeleteEventFilterCmd((CFE_EVS_DeleteEventFilter_t*)EVS_MsgPtr);
        -:  526:         }
        7:  527:         break;
        -:  528:
        -:  529:      case CFE_EVS_WRITE_APP_DATA_FILE_CC:
        -:  530:
        5:  531:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_WriteAppDataFile_t)))
        -:  532:         {
        4:  533:             Status = CFE_EVS_WriteAppDataFileCmd((CFE_EVS_WriteAppDataFile_t*)EVS_MsgPtr);
        -:  534:         }
        5:  535:         break;
        -:  536:
        -:  537:      case CFE_EVS_SET_LOG_MODE_CC:
        -:  538:
        6:  539:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_SetLogMode_t)))
        -:  540:         {
        5:  541:             Status = CFE_EVS_SetLogModeCmd((CFE_EVS_SetLogMode_t*)EVS_MsgPtr);
        -:  542:         }
        6:  543:         break;
        -:  544:
        -:  545:      case CFE_EVS_CLEAR_LOG_CC:
        -:  546:
        3:  547:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_ClearLog_t)))
        -:  548:         {
        2:  549:             Status = CFE_EVS_ClearLogCmd((CFE_EVS_ClearLog_t *)EVS_MsgPtr);
        -:  550:         }
        3:  551:         break;
        -:  552:
        -:  553:      case CFE_EVS_WRITE_LOG_DATA_FILE_CC:
        -:  554:
        3:  555:         if (CFE_EVS_VerifyCmdLength(EVS_MsgPtr, sizeof(CFE_EVS_WriteLogDataFile_t)))
        -:  556:         {
        2:  557:             Status = CFE_EVS_WriteLogDataFileCmd((CFE_EVS_WriteLogDataFile_t*)EVS_MsgPtr);
        -:  558:         }
        3:  559:         break;
        -:  560:
        -:  561:       /* default is a bad command code as it was not found above */
        -:  562:       default:
        -:  563:
        1:  564:          EVS_SendEvent(CFE_EVS_ERR_CC_EID, CFE_EVS_EventType_ERROR,
        -:  565:                       "Invalid command code -- ID = 0x%08x, CC = %d",
        -:  566:                        (unsigned int)CFE_SB_GetMsgId(EVS_MsgPtr), (int)CFE_SB_GetCmdCode(EVS_MsgPtr));
        1:  567:          Status = CFE_STATUS_BAD_COMMAND_CODE;
        -:  568:
        -:  569:          break;
        -:  570:   }
        -:  571:
      125:  572:   if (Status == CFE_SUCCESS)
        -:  573:   {
       44:  574:      CFE_EVS_GlobalData.EVS_TlmPkt.Payload.CommandCounter++;
        -:  575:   }
       81:  576:   else if (Status < 0)  /* Negative values indicate errors */
        -:  577:   {
       80:  578:      CFE_EVS_GlobalData.EVS_TlmPkt.Payload.CommandErrorCounter++;
        -:  579:   }
        -:  580:
      125:  581:   return;
        -:  582:
        -:  583:} /* End of EVS_ProcessGroundCommand() */
        -:  584:
        -:  585:
        -:  586:/*
        -:  587:**             Function Prologue
        -:  588:**
        -:  589:** Function Name:      CFE_EVS_VerifyCmdLength
        -:  590:**
        -:  591:** Purpose:  This function validates the length of incoming commands.
        -:  592:**
        -:  593:** Assumptions and Notes:
        -:  594:**
        -:  595:*/
      124:  596:boolean CFE_EVS_VerifyCmdLength(CFE_SB_MsgPtr_t Msg, uint16 ExpectedLength)
        -:  597:{
      124:  598:    boolean result       = TRUE;
      124:  599:    uint16  ActualLength = CFE_SB_GetTotalMsgLength(Msg);
        -:  600:
        -:  601:    /*
        -:  602:    ** Verify the command packet length
        -:  603:    */
      124:  604:    if (ExpectedLength != ActualLength)
        -:  605:    {
       21:  606:        CFE_SB_MsgId_t MessageID = CFE_SB_GetMsgId(Msg);
       21:  607:        uint16 CommandCode = CFE_SB_GetCmdCode(Msg);
        -:  608:
       21:  609:        EVS_SendEvent(CFE_EVS_LEN_ERR_EID, CFE_EVS_EventType_ERROR,
        -:  610:           "Invalid cmd length: ID = 0x%X, CC = %d, Exp Len = %d, Len = %d",
        -:  611:                          (unsigned int)MessageID, (int)CommandCode, (int)ExpectedLength, (int)ActualLength);
       21:  612:        result = FALSE;
        -:  613:    }
        -:  614:
      124:  615:    return(result);
        -:  616:
        -:  617:} /* End of CFE_EVS_VerifyCmdLength() */
        -:  618:
        -:  619:/*
        -:  620:**             Function Prologue
        -:  621:**
        -:  622:** Function Name:      CFE_EVS_NoopCmd
        -:  623:**
        -:  624:** Purpose:  This function processes "no-op" commands received on the EVS command pipe.
        -:  625:**
        -:  626:** Assumptions and Notes:
        -:  627:**
        -:  628:*/
        1:  629:int32 CFE_EVS_NoopCmd(const CFE_EVS_Noop_t *data)
        -:  630:{
        1:  631:   EVS_SendEvent(CFE_EVS_NOOP_EID, CFE_EVS_EventType_INFORMATION,"No-op command. cFE Version %d.%d.%d.%d",
        -:  632:                 CFE_MAJOR_VERSION,CFE_MINOR_VERSION,CFE_REVISION,CFE_MISSION_REV);
        1:  633:   return CFE_SUCCESS;
        -:  634:}
        -:  635:
        -:  636:/*
        -:  637:**             Function Prologue
        -:  638:**
        -:  639:** Function Name:      CFE_EVS_ClearLogCmd
        -:  640:**
        -:  641:** Purpose:  This function processes "clear log" commands received on the EVS command pipe.
        -:  642:**
        -:  643:** Assumptions and Notes:
        -:  644:**
        -:  645:*/
        2:  646:int32 CFE_EVS_ClearLogCmd(const CFE_EVS_ClearLog_t *data)
        -:  647:{
        -:  648:    int32 Status;
        -:  649:
        2:  650:    if (CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogEnabled == TRUE)
        -:  651:    {
        1:  652:        EVS_ClearLog();
        1:  653:        Status = CFE_SUCCESS;
        -:  654:    }
        -:  655:    else
        -:  656:    {
        1:  657:       EVS_SendEvent(CFE_EVS_NO_LOGCLR_EID, CFE_EVS_EventType_ERROR,
        -:  658:                    "Clear Log Command: Event Log is Disabled");
        1:  659:       Status = CFE_EVS_FUNCTION_DISABLED;
        -:  660:    }
        2:  661:    return Status;
        -:  662:}
        -:  663:
        -:  664:/*
        -:  665:**             Function Prologue
        -:  666:**
        -:  667:** Function Name:      CFE_EVS_ReportHousekeepingCmd
        -:  668:**
        -:  669:** Purpose:  Request for housekeeping status telemetry packet.
        -:  670:**
        -:  671:** Assumptions and Notes:
        -:  672:**
        -:  673:*/
        2:  674:int32 CFE_EVS_ReportHousekeepingCmd (const CCSDS_CommandPacket_t *data)
        -:  675:{
        -:  676:   uint32 i, j;
        -:  677:
        -:  678:
        2:  679:   if (CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogEnabled == TRUE)
        -:  680:   {   
        -:  681:      /* Copy hk variables that are maintained in the event log */
        1:  682:      CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogFullFlag = CFE_EVS_GlobalData.EVS_LogPtr->LogFullFlag;
        1:  683:      CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogMode = CFE_EVS_GlobalData.EVS_LogPtr->LogMode;
        1:  684:      CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogOverflowCounter = CFE_EVS_GlobalData.EVS_LogPtr->LogOverflowCounter;
        -:  685:   }
        -:  686:
        -:  687:   /* Write event state data for registered apps to telemetry packet */
       66:  688:   for (i = 0, j = 0; j < CFE_MISSION_ES_MAX_APPLICATIONS && i < CFE_PLATFORM_ES_MAX_APPLICATIONS; i++)
        -:  689:   {
       64:  690:      if (CFE_EVS_GlobalData.AppData[i].RegisterFlag == TRUE)
        -:  691:      {
        1:  692:         CFE_EVS_GlobalData.EVS_TlmPkt.Payload.AppData[j].AppID = i;
        1:  693:         CFE_EVS_GlobalData.EVS_TlmPkt.Payload.AppData[j].AppEnableStatus = CFE_EVS_GlobalData.AppData[i].ActiveFlag;
        1:  694:         CFE_EVS_GlobalData.EVS_TlmPkt.Payload.AppData[j].AppMessageSentCounter = CFE_EVS_GlobalData.AppData[i].EventCount;
        1:  695:         j++;
        -:  696:      }
        -:  697:   }
        -:  698:
        -:  699:   /* Clear unused portion of event state data in telemetry packet */
       33:  700:   for (i = j; i < CFE_MISSION_ES_MAX_APPLICATIONS; i++)
        -:  701:   {
       31:  702:      CFE_EVS_GlobalData.EVS_TlmPkt.Payload.AppData[i].AppID = 0;
       31:  703:      CFE_EVS_GlobalData.EVS_TlmPkt.Payload.AppData[i].AppEnableStatus = FALSE;
       31:  704:      CFE_EVS_GlobalData.EVS_TlmPkt.Payload.AppData[i].AppMessageSentCounter = 0;
        -:  705:   }
        -:  706:
        2:  707:   CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_EVS_GlobalData.EVS_TlmPkt);
        -:  708:
        2:  709:   CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_EVS_GlobalData.EVS_TlmPkt);
        -:  710:
        2:  711:   return CFE_STATUS_NO_COUNTER_INCREMENT;
        -:  712:} /* End of CFE_EVS_ReportHousekeepingCmd() */
        -:  713:
        -:  714:
        -:  715:/*
        -:  716:**             Function Prologue
        -:  717:**
        -:  718:** Function Name:      CFE_EVS_ResetCountersCmd
        -:  719:**
        -:  720:** Purpose:  This function resets all the global counter variables that are
        -:  721:**           part of the task telemetry.
        -:  722:**
        -:  723:** Assumptions and Notes:
        -:  724:**
        -:  725:*/
        1:  726:int32 CFE_EVS_ResetCountersCmd(const CFE_EVS_ResetCounters_t *data)
        -:  727:{
        -:  728:    /* Status of commands processed by EVS task */
        1:  729:    CFE_EVS_GlobalData.EVS_TlmPkt.Payload.CommandCounter  = 0;
        1:  730:    CFE_EVS_GlobalData.EVS_TlmPkt.Payload.CommandErrorCounter   =  0;
        -:  731:
        -:  732:    /* EVS telemetry counters */
        1:  733:    CFE_EVS_GlobalData.EVS_TlmPkt.Payload.MessageSendCounter = 0;
        1:  734:    CFE_EVS_GlobalData.EVS_TlmPkt.Payload.MessageTruncCounter = 0;
        1:  735:    CFE_EVS_GlobalData.EVS_TlmPkt.Payload.UnregisteredAppCounter = 0;
        -:  736:
        1:  737:    EVS_SendEvent(CFE_EVS_RSTCNT_EID, CFE_EVS_EventType_DEBUG, "Reset Counters Command Received");
        -:  738:
        -:  739:    /* NOTE: Historically the reset counters command does _NOT_ increment the command counter */
        -:  740:
        1:  741:    return CFE_STATUS_NO_COUNTER_INCREMENT;
        -:  742:} /* End of CFE_EVS_ResetCountersCmd() */
        -:  743:
        -:  744:
        -:  745:/*
        -:  746:**             Function Prologue
        -:  747:**
        -:  748:** Function Name:      CFE_EVS_SetEventFilterMaskCmd
        -:  749:**
        -:  750:** Purpose:  This routine sets the filter mask for the given event_id in the
        -:  751:**           calling task's filter array
        -:  752:**
        -:  753:** Assumptions and Notes:
        -:  754:**
        -:  755:*/
        5:  756:int32 CFE_EVS_SetFilterCmd(const CFE_EVS_SetFilter_t *data)
        -:  757:{
        5:  758:   const CFE_EVS_AppNameEventIDMaskCmd_Payload_t *CmdPtr = &data->Payload;
        -:  759:   EVS_BinFilter_t    *FilterPtr;
        5:  760:   uint32              AppID = CFE_EVS_UNDEF_APPID;
        -:  761:   int32               Status;
        -:  762:   EVS_AppData_t      *AppDataPtr;
        -:  763:   char                LocalName[OS_MAX_API_NAME];
        -:  764:
        -:  765:   /*
        -:  766:    * Althgouh EVS_GetApplicationInfo() does not require a null terminated argument,
        -:  767:    * the value is passed to EVS_SendEvent which does require termination (normal C string)
        -:  768:    */
        5:  769:   CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppName, NULL, OS_MAX_API_NAME, sizeof(CmdPtr->AppName));
        -:  770:
        -:  771:   /* Retreive application data */
        5:  772:   Status = EVS_GetApplicationInfo(&AppID, LocalName);
        -:  773:
        5:  774:   if (Status == CFE_SUCCESS)
        -:  775:   {
        2:  776:      AppDataPtr = &CFE_EVS_GlobalData.AppData[AppID];
        -:  777:
        2:  778:      FilterPtr = EVS_FindEventID(CmdPtr->EventID, AppDataPtr->BinFilters);
        -:  779:
        2:  780:      if(FilterPtr != NULL)
        -:  781:      {
        -:  782:         /* Set application filter mask */
        1:  783:         FilterPtr->Mask = CmdPtr->Mask;
        -:  784:
        1:  785:         EVS_SendEvent(CFE_EVS_SETFILTERMSK_EID, CFE_EVS_EventType_DEBUG,
        -:  786:                           "Set Filter Mask Command Received with AppName=%s, EventID=0x%08x, Mask=0x%04x",
        -:  787:                           LocalName, (unsigned int)CmdPtr->EventID, (unsigned int)CmdPtr->Mask);
        -:  788:
        -:  789:      }
        -:  790:      else
        -:  791:      {
        1:  792:         EVS_SendEvent(CFE_EVS_ERR_EVTIDNOREGS_EID, CFE_EVS_EventType_ERROR,
        -:  793:                           "%s Event ID %d not registered for filtering: CC = %lu ",
        -:  794:                           LocalName, (int)CmdPtr->EventID, (long unsigned int)CFE_EVS_SET_FILTER_CC);
        -:  795:
        1:  796:         Status = CFE_EVS_EVT_NOT_REGISTERED;
        -:  797:      }
        -:  798:   }
        3:  799:   else if(Status == CFE_EVS_APP_NOT_REGISTERED)
        -:  800:   {
        1:  801:      EVS_SendEvent(CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_EventType_ERROR,
        -:  802:                        "%s not registered with EVS: CC = %lu",
        -:  803:                        LocalName, (long unsigned int)CFE_EVS_SET_FILTER_CC);
        -:  804:   }
        2:  805:   else if(Status == CFE_EVS_APP_ILLEGAL_APP_ID)
        -:  806:   {
        1:  807:      EVS_SendEvent(CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_EventType_ERROR,
        -:  808:                        "Illegal application ID %d retrieved for %s: CC = %lu",
        -:  809:                        (int)AppID, LocalName, (long unsigned int)CFE_EVS_SET_FILTER_CC);
        -:  810:   }
        -:  811:   else
        -:  812:   {
        1:  813:      EVS_SendEvent(CFE_EVS_ERR_NOAPPIDFOUND_EID, CFE_EVS_EventType_ERROR,
        -:  814:                        "Unable to retrieve application ID for %s: CC = %lu",
        -:  815:                        LocalName, (long unsigned int)CFE_EVS_SET_FILTER_CC);
        -:  816:   }
        -:  817:
        5:  818:   return Status;
        -:  819:
        -:  820:} /* End CFE_EVS_SetFilterMaskCmd */
        -:  821:
        -:  822:
        -:  823:
        -:  824:/*
        -:  825:**             Function Prologue
        -:  826:**
        -:  827:** Function Name:      CFE_EVS_EnablePortsCmd
        -:  828:**
        -:  829:** Purpose:  This routine sets the command given ports to an enabled state
        -:  830:**
        -:  831:** Assumptions and Notes:
        -:  832:** Shifting is done so the value not masked off is placed in the ones spot:
        -:  833:** necessary for comparing with TRUE.
        -:  834:*/
        5:  835:int32 CFE_EVS_EnablePortsCmd(const CFE_EVS_EnablePorts_t *data)
        -:  836:{
        5:  837:    const CFE_EVS_BitMaskCmd_Payload_t *CmdPtr = &data->Payload;
        -:  838:    int32 ReturnCode;
        -:  839:
        -:  840:    /* Need to check for an out of range bitmask, since oue bit masks are only 4 bits */
        7:  841:    if (CmdPtr->BitMask == 0x0 || CmdPtr->BitMask > 0x0F)
        -:  842:    {
        2:  843:        EVS_SendEvent(CFE_EVS_ERR_INVALID_BITMASK_EID, CFE_EVS_EventType_ERROR,
        -:  844:                          "Bit Mask = 0x%08x out of range: CC = %lu",
        -:  845:                          (unsigned int)CmdPtr->BitMask, (long unsigned int)CFE_EVS_ENABLE_PORTS_CC);
        2:  846:        ReturnCode = CFE_EVS_INVALID_PARAMETER;
        -:  847:    }
        -:  848:    else
        -:  849:    {
        -:  850:
        -:  851:        /* Process command data */
        3:  852:        if(((CmdPtr->BitMask & CFE_EVS_PORT1_BIT) >> 0) == TRUE)
        -:  853:        {
        2:  854:            CFE_EVS_GlobalData.EVS_TlmPkt.Payload.OutputPort |= CFE_EVS_PORT1_BIT;
        -:  855:        }
        3:  856:        if(((CmdPtr->BitMask & CFE_EVS_PORT2_BIT) >>1) == TRUE)
        -:  857:        {
        2:  858:            CFE_EVS_GlobalData.EVS_TlmPkt.Payload.OutputPort |= CFE_EVS_PORT2_BIT;
        -:  859:        }
        3:  860:        if(((CmdPtr->BitMask & CFE_EVS_PORT3_BIT) >> 2) == TRUE)
        -:  861:        {
        2:  862:            CFE_EVS_GlobalData.EVS_TlmPkt.Payload.OutputPort |= CFE_EVS_PORT3_BIT;
        -:  863:        }
        3:  864:        if(((CmdPtr->BitMask & CFE_EVS_PORT4_BIT) >>3) == TRUE)
        -:  865:        {
        2:  866:            CFE_EVS_GlobalData.EVS_TlmPkt.Payload.OutputPort |= CFE_EVS_PORT4_BIT;
        -:  867:        }
        -:  868:
        3:  869:        EVS_SendEvent(CFE_EVS_ENAPORT_EID, CFE_EVS_EventType_DEBUG,
        -:  870:                        "Enable Ports Command Received with Port Bit Mask = 0x%02x",
        -:  871:                        (unsigned int)CmdPtr->BitMask);
        3:  872:        ReturnCode = CFE_SUCCESS;
        -:  873:    }
        -:  874:
        5:  875:    return ReturnCode;
        -:  876:
        -:  877:} /* End CFE_EVS_EnablePortsCmd */
        -:  878:
        -:  879:
        -:  880:/*
        -:  881:**             Function Prologue
        -:  882:**
        -:  883:** Function Name:      CFE_EVS_DisablePortsCmd
        -:  884:**
        -:  885:** Purpose:  This routine sets the command given ports to a disabled state
        -:  886:**
        -:  887:** Assumptions and Notes:
        -:  888:** Shifting is done so the value not masked off is placed in the ones spot:
        -:  889:** necessary for comparing with TRUE.
        -:  890:*/
        6:  891:int32 CFE_EVS_DisablePortsCmd(const CFE_EVS_DisablePorts_t *data)
        -:  892:{
        6:  893:    const CFE_EVS_BitMaskCmd_Payload_t *CmdPtr = &data->Payload;
        -:  894:    int32 ReturnCode;
        -:  895:
        -:  896:    /* Need to check for an out of range bitmask, since oue bit masks are only 4 bits */
        8:  897:    if (CmdPtr->BitMask == 0x0 || CmdPtr->BitMask > 0x0F)
        -:  898:    {
        2:  899:        EVS_SendEvent(CFE_EVS_ERR_INVALID_BITMASK_EID, CFE_EVS_EventType_ERROR,
        -:  900:                          "Bit Mask = 0x%08x out of range: CC = %lu",
        -:  901:                          (unsigned int)CmdPtr->BitMask, (long unsigned int)CFE_EVS_DISABLE_PORTS_CC);
        2:  902:        ReturnCode = CFE_EVS_INVALID_PARAMETER;
        -:  903:    }
        -:  904:    else
        -:  905:    {
        -:  906:
        -:  907:        /* Process command data */
        4:  908:        if(((CmdPtr->BitMask & CFE_EVS_PORT1_BIT) >>0) == TRUE)
        -:  909:        {
        3:  910:            CFE_EVS_GlobalData.EVS_TlmPkt.Payload.OutputPort &= ~CFE_EVS_PORT1_BIT;
        -:  911:        }
        4:  912:        if(((CmdPtr->BitMask & CFE_EVS_PORT2_BIT) >> 1) == TRUE)
        -:  913:        {
        3:  914:            CFE_EVS_GlobalData.EVS_TlmPkt.Payload.OutputPort &= ~CFE_EVS_PORT2_BIT;
        -:  915:        }
        4:  916:        if(((CmdPtr->BitMask & CFE_EVS_PORT3_BIT) >> 2) == TRUE)
        -:  917:        {
        3:  918:            CFE_EVS_GlobalData.EVS_TlmPkt.Payload.OutputPort &= ~CFE_EVS_PORT3_BIT;
        -:  919:        }
        4:  920:        if(((CmdPtr->BitMask & CFE_EVS_PORT4_BIT) >>3) == TRUE)
        -:  921:        {
        3:  922:            CFE_EVS_GlobalData.EVS_TlmPkt.Payload.OutputPort &= ~CFE_EVS_PORT4_BIT;
        -:  923:        }
        -:  924:
        4:  925:        EVS_SendEvent(CFE_EVS_DISPORT_EID, CFE_EVS_EventType_DEBUG,
        -:  926:                         "Disable Ports Command Received with Port Bit Mask = 0x%02x",
        -:  927:                         (unsigned int)CmdPtr->BitMask);
        -:  928:        
        4:  929:        ReturnCode = CFE_SUCCESS;
        -:  930:    }
        -:  931:   
        6:  932:    return ReturnCode;
        -:  933:
        -:  934:} /* End CFE_EVS_DisablePortsCmd */
        -:  935:
        -:  936:
        -:  937:
        -:  938:/*
        -:  939:**             Function Prologue
        -:  940:**
        -:  941:** Function Name:      CFE_EVS_EnableEventTypesCmd
        -:  942:**
        -:  943:** Purpose:  This routine sets the given event types to an enabled state across all
        -:  944:**           registered applications
        -:  945:**
        -:  946:** Assumptions and Notes:
        -:  947:**
        -:  948:*/
        3:  949:int32 CFE_EVS_EnableEventTypeCmd(const CFE_EVS_EnableEventType_t *data)
        -:  950:{
        -:  951:   uint32      i;
        3:  952:   const CFE_EVS_BitMaskCmd_Payload_t *CmdPtr = &data->Payload;
        -:  953:   int32  ReturnCode;
        -:  954:
        -:  955:   /* Need to check for an out of range bitmask, since our bit masks are only 4 bits */
        5:  956:   if (CmdPtr->BitMask == 0x0 || CmdPtr->BitMask > 0x0F)
        -:  957:   {
        2:  958:       EVS_SendEvent(CFE_EVS_ERR_INVALID_BITMASK_EID, CFE_EVS_EventType_ERROR,
        -:  959:                         "Bit Mask = 0x%08x out of range: CC = %lu",
        -:  960:                         (unsigned int)CmdPtr->BitMask, (long unsigned int)CFE_EVS_ENABLE_EVENT_TYPE_CC);
        2:  961:       ReturnCode = CFE_EVS_INVALID_PARAMETER;
        -:  962:   }
        -:  963:   else
        -:  964:   {
       33:  965:       for (i = 0; i < CFE_PLATFORM_ES_MAX_APPLICATIONS; i++)
        -:  966:       {
        -:  967:           /* Make sure application is registered for event services */
       32:  968:           if (CFE_EVS_GlobalData.AppData[i].RegisterFlag == TRUE)
        -:  969:           {
        1:  970:               EVS_EnableTypes(CmdPtr->BitMask, i);
        -:  971:           }
        -:  972:       }
        -:  973:
        1:  974:       EVS_SendEvent(CFE_EVS_ENAEVTTYPE_EID, CFE_EVS_EventType_DEBUG,
        -:  975:               "Enable Event Type Command Received with Event Type Bit Mask = 0x%02x",
        -:  976:               (unsigned int)CmdPtr->BitMask);
        -:  977:
        1:  978:       ReturnCode = CFE_SUCCESS;
        -:  979:   }
        -:  980:
        3:  981:   return ReturnCode;
        -:  982:
        -:  983:} /* End CFE_EVS_EnableEventTypesCmd */
        -:  984:
        -:  985:
        -:  986:/*
        -:  987:**             Function Prologue
        -:  988:**
        -:  989:** Function Name:      CFE_EVS_DisableEventTypesCmd
        -:  990:**
        -:  991:** Purpose:  This routine sets the given event types to a disabled state across all
        -:  992:**           registered applications
        -:  993:**
        -:  994:** Assumptions and Notes:
        -:  995:**
        -:  996:*/
        3:  997:int32 CFE_EVS_DisableEventTypeCmd(const CFE_EVS_DisableEventType_t *data)
        -:  998:{
        -:  999:   uint32   i;
        3: 1000:   const CFE_EVS_BitMaskCmd_Payload_t *CmdPtr = &data->Payload;
        -: 1001:   int32  ReturnCode;
        -: 1002:
        -: 1003:   /* Need to check for an out of range bitmask, since our bit masks are only 4 bits */
        5: 1004:   if (CmdPtr->BitMask == 0x0 || CmdPtr->BitMask > 0x0F)
        -: 1005:   {
        2: 1006:       EVS_SendEvent(CFE_EVS_ERR_INVALID_BITMASK_EID, CFE_EVS_EventType_ERROR,
        -: 1007:                         "Bit Mask = 0x%08x out of range: CC = %lu",
        -: 1008:                         (unsigned int)CmdPtr->BitMask, (long unsigned int)CFE_EVS_DISABLE_EVENT_TYPE_CC);
        2: 1009:       ReturnCode = CFE_EVS_INVALID_PARAMETER;
        -: 1010:   }
        -: 1011:
        -: 1012:   else
        -: 1013:   {
       33: 1014:       for (i = 0; i < CFE_PLATFORM_ES_MAX_APPLICATIONS; i++)
        -: 1015:       {
        -: 1016:           /* Make sure application is registered for event services */
       32: 1017:           if (CFE_EVS_GlobalData.AppData[i].RegisterFlag == TRUE)
        -: 1018:           {
        1: 1019:               EVS_DisableTypes(CmdPtr->BitMask, i);
        -: 1020:           }
        -: 1021:       }
        -: 1022:
        1: 1023:       EVS_SendEvent(CFE_EVS_DISEVTTYPE_EID, CFE_EVS_EventType_DEBUG,
        -: 1024:               "Disable Event Type Command Received with Event Type Bit Mask = 0x%02x",
        -: 1025:               (unsigned int)CmdPtr->BitMask);
        -: 1026:
        1: 1027:       ReturnCode = CFE_SUCCESS;
        -: 1028:   }
        -: 1029:
        3: 1030:   return ReturnCode;
        -: 1031:
        -: 1032:} /* End CFE_EVS_DisableEventTypesCmd */
        -: 1033:
        -: 1034:
        -: 1035:
        -: 1036:/*
        -: 1037:**             Function Prologue
        -: 1038:**
        -: 1039:** Function Name:      CFE_EVS_SetEventFormatModeCmd
        -: 1040:**
        -: 1041:** Purpose:  This routine sets the Event Format Mode
        -: 1042:**
        -: 1043:** Assumptions and Notes:
        -: 1044:**
        -: 1045:*/
        3: 1046:int32 CFE_EVS_SetEventFormatModeCmd(const CFE_EVS_SetEventFormatMode_t *data)
        -: 1047:{
        3: 1048:   const CFE_EVS_SetEventFormatMode_Payload_t *CmdPtr = &data->Payload;
        -: 1049:   int32 Status;
        -: 1050:
        5: 1051:   if((CmdPtr->MsgFormat == CFE_EVS_MsgFormat_SHORT) || (CmdPtr->MsgFormat == CFE_EVS_MsgFormat_LONG))
        -: 1052:   {
        2: 1053:      CFE_EVS_GlobalData.EVS_TlmPkt.Payload.MessageFormatMode = CmdPtr->MsgFormat;
        -: 1054:
        2: 1055:      EVS_SendEvent(CFE_EVS_SETEVTFMTMOD_EID, CFE_EVS_EventType_DEBUG,
        -: 1056:                        "Set Event Format Mode Command Received with Mode = 0x%02x",
        -: 1057:                        (unsigned int)CmdPtr->MsgFormat);
        2: 1058:      Status = CFE_SUCCESS;
        -: 1059:   }
        -: 1060:   else
        -: 1061:   {
        1: 1062:      EVS_SendEvent(CFE_EVS_ERR_ILLEGALFMTMOD_EID, CFE_EVS_EventType_ERROR,
        -: 1063:                        "Set Event Format Mode Command: Invalid Event Format Mode = 0x%02x", 
        -: 1064:                        (unsigned int)CmdPtr->MsgFormat);
        1: 1065:      Status = CFE_EVS_INVALID_PARAMETER;
        -: 1066:   }
        -: 1067:
        3: 1068:   return Status;
        -: 1069:
        -: 1070:} /* End CFE_EVS_SetEventFormatModeCmd */
        -: 1071:
        -: 1072:
        -: 1073:/*
        -: 1074:**             Function Prologue
        -: 1075:**
        -: 1076:** Function Name:      CFE_EVS_EnableAppEventTypesCmd
        -: 1077:**
        -: 1078:** Purpose:  This routine sets the given event type for the given application identifier to an
        -: 1079:**           enabled state
        -: 1080:**
        -: 1081:** Assumptions and Notes:
        -: 1082:**
        -: 1083:*/
       12: 1084:int32 CFE_EVS_EnableAppEventTypeCmd(const CFE_EVS_EnableAppEventType_t *data)
        -: 1085:{
       12: 1086:   const CFE_EVS_AppNameBitMaskCmd_Payload_t *CmdPtr = &data->Payload;
       12: 1087:   uint32  AppID = CFE_EVS_UNDEF_APPID;
        -: 1088:   int32   Status;
        -: 1089:   char    LocalName[OS_MAX_API_NAME];
        -: 1090:
        -: 1091:   /*
        -: 1092:    * Althgouh EVS_GetApplicationInfo() does not require a null terminated argument,
        -: 1093:    * the value is passed to EVS_SendEvent which does require termination (normal C string)
        -: 1094:    */
       12: 1095:   CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppName, NULL, OS_MAX_API_NAME, sizeof(CmdPtr->AppName));
        -: 1096:
        -: 1097:   /* Retrieve application data */
       12: 1098:   Status = EVS_GetApplicationInfo(&AppID, LocalName);
        -: 1099:
       12: 1100:   if(Status == CFE_SUCCESS)
        -: 1101:   {
        -: 1102:
        -: 1103:        /* Need to check for an out of range bitmask, since our bit masks are only 4 bits */
       12: 1104:        if (CmdPtr->BitMask == 0x0 || CmdPtr->BitMask > 0x0F)
        -: 1105:        {
        3: 1106:            EVS_SendEvent(CFE_EVS_ERR_INVALID_BITMASK_EID, CFE_EVS_EventType_ERROR,
        -: 1107:                              "Bit Mask = 0x%08x out of range: CC = %lu",
        -: 1108:                              (unsigned int)CmdPtr->BitMask, (long unsigned int)CFE_EVS_ENABLE_APP_EVENT_TYPE_CC);
        3: 1109:            Status = CFE_EVS_INVALID_PARAMETER;
        -: 1110:        }
        -: 1111:        else
        -: 1112:        {
        6: 1113:            EVS_EnableTypes(CmdPtr->BitMask, AppID);
        -: 1114:        }
        -: 1115:   }
        3: 1116:   else if(Status == CFE_EVS_APP_NOT_REGISTERED)
        -: 1117:   {
        1: 1118:      EVS_SendEvent(CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1119:                        "%s not registered with EVS: CC = %lu",
        -: 1120:                        LocalName, (long unsigned int)CFE_EVS_ENABLE_APP_EVENT_TYPE_CC);
        -: 1121:   }
        2: 1122:   else if(Status == CFE_EVS_APP_ILLEGAL_APP_ID)
        -: 1123:   {
        1: 1124:      EVS_SendEvent(CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_EventType_ERROR,
        -: 1125:                        "Illegal application ID %d retrieved for %s: CC = %lu",
        -: 1126:                        (int)AppID, LocalName, (long unsigned int)CFE_EVS_ENABLE_APP_EVENT_TYPE_CC);
        -: 1127:   }
        -: 1128:   else
        -: 1129:   {
        1: 1130:      EVS_SendEvent(CFE_EVS_ERR_NOAPPIDFOUND_EID, CFE_EVS_EventType_ERROR,
        -: 1131:                        "Unable to retrieve application ID for %s: CC = %lu",
        -: 1132:                        LocalName, (long unsigned int)CFE_EVS_ENABLE_APP_EVENT_TYPE_CC);
        -: 1133:   }
        -: 1134:
       12: 1135:   if(Status == CFE_SUCCESS)
        -: 1136:   {
        6: 1137:      EVS_SendEvent(CFE_EVS_ENAAPPEVTTYPE_EID, CFE_EVS_EventType_DEBUG,
        -: 1138:                        "Enable App Event Type Command Received with AppName = %s, EventType Bit Mask = 0x%02x",
        6: 1139:                        LocalName, CmdPtr->BitMask);
        -: 1140:   }
        -: 1141:
       12: 1142:   return Status;
        -: 1143:
        -: 1144:} /* End CFE_EVS_EnableAppEventTypesCmd */
        -: 1145:
        -: 1146:
        -: 1147:/*
        -: 1148:**             Function Prologue
        -: 1149:**
        -: 1150:** Function Name:      CFE_EVS_DisableAppEventTypesCmd
        -: 1151:**
        -: 1152:** Purpose:  This routine sets the given event type for the given application identifier to a
        -: 1153:**           disabled state
        -: 1154:**
        -: 1155:** Assumptions and Notes:
        -: 1156:**
        -: 1157:*/
        7: 1158:int32 CFE_EVS_DisableAppEventTypeCmd(const CFE_EVS_DisableAppEventType_t *data)
        -: 1159:{
        7: 1160:   uint32 AppID  = CFE_EVS_UNDEF_APPID;
        7: 1161:   const CFE_EVS_AppNameBitMaskCmd_Payload_t *CmdPtr = &data->Payload;
        -: 1162:   int32  Status;
        -: 1163:   char    LocalName[OS_MAX_API_NAME];
        -: 1164:
        -: 1165:   /*
        -: 1166:    * Althgouh EVS_GetApplicationInfo() does not require a null terminated argument,
        -: 1167:    * the value is passed to EVS_SendEvent which does require termination (normal C string)
        -: 1168:    */
        7: 1169:   CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppName, NULL, OS_MAX_API_NAME, sizeof(CmdPtr->AppName));
        -: 1170:
        -: 1171:   /* Retreive application data */
        7: 1172:   Status = EVS_GetApplicationInfo(&AppID, LocalName);
        -: 1173:
        7: 1174:   if(Status == CFE_SUCCESS)
        -: 1175:   {
        -: 1176:
        -: 1177:        /* Need to check for an out of range bitmask, since our bit masks are only 4 bits */
        7: 1178:        if (CmdPtr->BitMask == 0x0 || CmdPtr->BitMask > 0x0F)
        -: 1179:        {
        3: 1180:            EVS_SendEvent(CFE_EVS_ERR_INVALID_BITMASK_EID, CFE_EVS_EventType_ERROR,
        -: 1181:                              "Bit Mask = 0x%08x out of range: CC = %lu",
        -: 1182:                              (unsigned int)CmdPtr->BitMask, (long unsigned int)CFE_EVS_DISABLE_APP_EVENT_TYPE_CC);
        3: 1183:            Status = CFE_EVS_INVALID_PARAMETER;
        -: 1184:        }
        -: 1185:        else
        -: 1186:        {
        1: 1187:            EVS_DisableTypes(CmdPtr->BitMask, AppID);
        -: 1188:        }
        -: 1189:   }
        3: 1190:   else if(Status == CFE_EVS_APP_NOT_REGISTERED)
        -: 1191:   {
        1: 1192:      EVS_SendEvent(CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1193:                        "%s not registered with EVS,: CC = %lu",
        -: 1194:                        LocalName,(long unsigned int)CFE_EVS_DISABLE_APP_EVENT_TYPE_CC);
        -: 1195:   }
        2: 1196:   else if(Status == CFE_EVS_APP_ILLEGAL_APP_ID)
        -: 1197:   {
        1: 1198:      EVS_SendEvent(CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_EventType_ERROR,
        -: 1199:                        "Illegal application ID %d retrieved for %s: CC = %lu",
        -: 1200:                        (int)AppID, LocalName, (long unsigned int)CFE_EVS_DISABLE_APP_EVENT_TYPE_CC);
        -: 1201:   }
        -: 1202:   else
        -: 1203:   {
        1: 1204:      EVS_SendEvent(CFE_EVS_ERR_NOAPPIDFOUND_EID, CFE_EVS_EventType_ERROR,
        -: 1205:                        "Unable to retrieve application ID for %s: CC = %lu",
        -: 1206:                        LocalName, (long unsigned int)CFE_EVS_DISABLE_APP_EVENT_TYPE_CC);
        -: 1207:   }
        -: 1208:
        7: 1209:   if(Status == CFE_SUCCESS)
        -: 1210:   {
        1: 1211:      EVS_SendEvent(CFE_EVS_DISAPPENTTYPE_EID, CFE_EVS_EventType_DEBUG,
        -: 1212:                        "Disable App Event Type Command Received with AppName = %s, EventType Bit Mask = 0x%02x",
        -: 1213:                        LocalName, (unsigned int)CmdPtr->BitMask);
        -: 1214:   }
        -: 1215:
        7: 1216:   return Status;
        -: 1217:
        -: 1218:} /* End CFE_EVS_DisableAppEventTypes */
        -: 1219:
        -: 1220:
        -: 1221:/*
        -: 1222:**             Function Prologue
        -: 1223:**
        -: 1224:** Function Name:      CFE_EVS_EnableAppEventsCmd
        -: 1225:**
        -: 1226:** Purpose:  This routine enables application events for the given application identifier
        -: 1227:**
        -: 1228:** Assumptions and Notes:
        -: 1229:**
        -: 1230:*/
        4: 1231:int32 CFE_EVS_EnableAppEventsCmd(const CFE_EVS_EnableAppEvents_t *data)
        -: 1232:{
        4: 1233:   uint32 AppID  = CFE_EVS_UNDEF_APPID;
        4: 1234:   const CFE_EVS_AppNameCmd_Payload_t *CmdPtr = &data->Payload;
        -: 1235:   int32  Status;
        -: 1236:   char                LocalName[OS_MAX_API_NAME];
        -: 1237:
        -: 1238:   /*
        -: 1239:    * Althgouh EVS_GetApplicationInfo() does not require a null terminated argument,
        -: 1240:    * the value is passed to EVS_SendEvent which does require termination (normal C string)
        -: 1241:    */
        4: 1242:   CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppName, NULL, OS_MAX_API_NAME, sizeof(CmdPtr->AppName));
        -: 1243:
        -: 1244:   /* Retrieve application data */
        4: 1245:   Status = EVS_GetApplicationInfo(&AppID, LocalName);
        -: 1246:
        4: 1247:   if(Status == CFE_SUCCESS)
        -: 1248:   {
        1: 1249:        CFE_EVS_GlobalData.AppData[AppID].ActiveFlag = TRUE;
        -: 1250:
        1: 1251:        EVS_SendEvent(CFE_EVS_ENAAPPEVT_EID, CFE_EVS_EventType_DEBUG,
        -: 1252:                          "Enable App Events Command Received with AppName = %s",
        -: 1253:                          LocalName);
        -: 1254:   }
        3: 1255:   else if(Status == CFE_EVS_APP_NOT_REGISTERED)
        -: 1256:   {
        1: 1257:      EVS_SendEvent(CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1258:                        "%s not registered with EVS: CC = %lu",
        -: 1259:                        LocalName, (long unsigned int)CFE_EVS_ENABLE_APP_EVENTS_CC);
        -: 1260:   }
        2: 1261:   else if(Status == CFE_EVS_APP_ILLEGAL_APP_ID)
        -: 1262:   {
        1: 1263:      EVS_SendEvent(CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_EventType_ERROR,
        -: 1264:                        "Illegal application ID %d retrieved for %s: CC = %lu",
        -: 1265:                        (int)AppID, LocalName, (long unsigned int)CFE_EVS_ENABLE_APP_EVENTS_CC);
        -: 1266:   }
        -: 1267:   else
        -: 1268:   {
        1: 1269:      EVS_SendEvent(CFE_EVS_ERR_NOAPPIDFOUND_EID, CFE_EVS_EventType_ERROR,
        -: 1270:                        "Unable to retrieve application ID for %s: CC = %lu",
        -: 1271:                        LocalName, (long unsigned int)CFE_EVS_ENABLE_APP_EVENTS_CC);
        -: 1272:   }
        -: 1273:
        4: 1274:   return Status;
        -: 1275:
        -: 1276:} /* End EVS_EnableAppEventsCmd */
        -: 1277:
        -: 1278:
        -: 1279:/*
        -: 1280:**             Function Prologue
        -: 1281:**
        -: 1282:** Function Name:      CFE_EVS_DisableAppEventsCmd
        -: 1283:**
        -: 1284:** Purpose:  This routine disables application events for the given application identifier
        -: 1285:**
        -: 1286:** Assumptions and Notes:
        -: 1287:**
        -: 1288:*/
        4: 1289:int32 CFE_EVS_DisableAppEventsCmd(const CFE_EVS_DisableAppEvents_t *data)
        -: 1290:{
        4: 1291:   uint32 AppID  = CFE_EVS_UNDEF_APPID;
        4: 1292:   const CFE_EVS_AppNameCmd_Payload_t *CmdPtr = &data->Payload;
        -: 1293:   int32  Status;
        -: 1294:   char                LocalName[OS_MAX_API_NAME];
        -: 1295:
        -: 1296:   /*
        -: 1297:    * Althgouh EVS_GetApplicationInfo() does not require a null terminated argument,
        -: 1298:    * the value is passed to EVS_SendEvent which does require termination (normal C string)
        -: 1299:    */
        4: 1300:   CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppName, NULL, OS_MAX_API_NAME, sizeof(CmdPtr->AppName));
        -: 1301:
        -: 1302:   /* Retreive application data */
        4: 1303:   Status = EVS_GetApplicationInfo(&AppID, LocalName);
        -: 1304:
        4: 1305:   if(Status == CFE_SUCCESS)
        -: 1306:   {
        1: 1307:       CFE_EVS_GlobalData.AppData[AppID].ActiveFlag = FALSE;
        -: 1308:
        1: 1309:       EVS_SendEvent(CFE_EVS_DISAPPEVT_EID, CFE_EVS_EventType_DEBUG,
        -: 1310:               "Disable App Events Command Received with AppName = %s",
        -: 1311:               LocalName);
        -: 1312:   }
        3: 1313:   else if(Status == CFE_EVS_APP_NOT_REGISTERED)
        -: 1314:   {
        1: 1315:       EVS_SendEvent(CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1316:               "%s not registered with EVS: CC = %lu",
        -: 1317:               LocalName,(long unsigned int)CFE_EVS_DISABLE_APP_EVENTS_CC);
        -: 1318:   }
        2: 1319:   else if(Status == CFE_EVS_APP_ILLEGAL_APP_ID)
        -: 1320:   {
        1: 1321:       EVS_SendEvent(CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_EventType_ERROR,
        -: 1322:               "Illegal application ID %d retrieved for %s: CC = %lu",
        -: 1323:               (int)AppID, LocalName,(long unsigned int)CFE_EVS_DISABLE_APP_EVENTS_CC);
        -: 1324:   }
        -: 1325:   else
        -: 1326:   {
        1: 1327:       EVS_SendEvent(CFE_EVS_ERR_NOAPPIDFOUND_EID, CFE_EVS_EventType_ERROR,
        -: 1328:               "Disable App Events Command: Unable to retrieve application ID for %s: CC = %lu",
        -: 1329:               LocalName, (long unsigned int)CFE_EVS_DISABLE_APP_EVENTS_CC);
        -: 1330:   }
        -: 1331:
        4: 1332:   return Status;
        -: 1333:
        -: 1334:} /* End CFE_EVS_DisableAppEventsCmd */
        -: 1335:
        -: 1336:
        -: 1337:/*
        -: 1338:**             Function Prologue
        -: 1339:**
        -: 1340:** Function Name:      CFE_EVS_ResetAppEventCounterCmd
        -: 1341:**
        -: 1342:** Purpose:  This routine sets the application event counter to zero for the given
        -: 1343:**           application identifier
        -: 1344:**
        -: 1345:** Assumptions and Notes:
        -: 1346:**
        -: 1347:*/
        4: 1348:int32 CFE_EVS_ResetAppCounterCmd(const CFE_EVS_ResetAppCounter_t *data)
        -: 1349:{
        4: 1350:   uint32 AppID  = CFE_EVS_UNDEF_APPID;
        4: 1351:   const CFE_EVS_AppNameCmd_Payload_t *CmdPtr = &data->Payload;
        -: 1352:   int32  Status;
        -: 1353:   char   LocalName[OS_MAX_API_NAME];
        -: 1354:
        -: 1355:   /*
        -: 1356:    * Althgouh EVS_GetApplicationInfo() does not require a null terminated argument,
        -: 1357:    * the value is passed to EVS_SendEvent which does require termination (normal C string)
        -: 1358:    */
        4: 1359:   CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppName, NULL, OS_MAX_API_NAME, sizeof(CmdPtr->AppName));
        -: 1360:
        -: 1361:   /* Retreive application data */
        4: 1362:   Status = EVS_GetApplicationInfo(&AppID, LocalName);
        -: 1363:
        4: 1364:   if(Status == CFE_SUCCESS)
        -: 1365:   {
        1: 1366:       CFE_EVS_GlobalData.AppData[AppID].EventCount = 0;
        -: 1367:
        1: 1368:       EVS_SendEvent(CFE_EVS_RSTEVTCNT_EID, CFE_EVS_EventType_DEBUG,
        -: 1369:               "Reset Event Counter Command Received with AppName = %s",
        -: 1370:               LocalName);
        -: 1371:   }
        3: 1372:   else if(Status == CFE_EVS_APP_NOT_REGISTERED)
        -: 1373:   {
        1: 1374:       EVS_SendEvent(CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1375:               "%s not registered with EVS: CC = %lu",
        -: 1376:               LocalName, (long unsigned int)CFE_EVS_RESET_APP_COUNTER_CC);
        -: 1377:   }
        2: 1378:   else if(Status == CFE_EVS_APP_ILLEGAL_APP_ID)
        -: 1379:   {
        1: 1380:       EVS_SendEvent(CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_EventType_ERROR,
        -: 1381:               "Illegal application ID %d retrieved for %s: CC = %lu",
        -: 1382:               (int)AppID, LocalName,(long unsigned int) CFE_EVS_RESET_APP_COUNTER_CC);
        -: 1383:   }
        -: 1384:   else
        -: 1385:   {
        1: 1386:       EVS_SendEvent(CFE_EVS_ERR_NOAPPIDFOUND_EID, CFE_EVS_EventType_ERROR,
        -: 1387:               "Reset Event Counter Command: Unable to retrieve application ID for %s: CC = %lu",
        -: 1388:               LocalName, (long unsigned int)CFE_EVS_RESET_APP_COUNTER_CC);
        -: 1389:   }
        -: 1390:
        4: 1391:   return Status;
        -: 1392:
        -: 1393:} /* End CFE_EVS_ResetAppEventCounterCmd */
        -: 1394:
        -: 1395:
        -: 1396:/*
        -: 1397:**             Function Prologue
        -: 1398:**
        -: 1399:** Function Name:      CFE_EVS_ResetFilterCmd
        -: 1400:**
        -: 1401:** Purpose:  This routine sets the application event filter counter to zero for the given
        -: 1402:**           application identifier and event identifier
        -: 1403:**
        -: 1404:** Assumptions and Notes:
        -: 1405:**
        -: 1406:*/
        5: 1407:int32 CFE_EVS_ResetFilterCmd(const CFE_EVS_ResetFilter_t *data)
        -: 1408:{
        5: 1409:   const CFE_EVS_AppNameEventIDCmd_Payload_t *CmdPtr = &data->Payload;
        -: 1410:   EVS_BinFilter_t     *FilterPtr;
        5: 1411:   uint32               AppID = CFE_EVS_UNDEF_APPID;
        -: 1412:   int32                Status;
        -: 1413:   EVS_AppData_t       *AppDataPtr;
        -: 1414:   char                 LocalName[OS_MAX_API_NAME];
        -: 1415:
        -: 1416:   /*
        -: 1417:    * Althgouh EVS_GetApplicationInfo() does not require a null terminated argument,
        -: 1418:    * the value is passed to EVS_SendEvent which does require termination (normal C string)
        -: 1419:    */
        5: 1420:   CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppName, NULL, OS_MAX_API_NAME, sizeof(CmdPtr->AppName));
        -: 1421:
        -: 1422:   /* Retreive application data */
        5: 1423:   Status = EVS_GetApplicationInfo(&AppID, LocalName);
        -: 1424:
        5: 1425:   if(Status == CFE_SUCCESS)
        -: 1426:   {
        2: 1427:      AppDataPtr = &CFE_EVS_GlobalData.AppData[AppID];
        -: 1428:
        2: 1429:      FilterPtr = EVS_FindEventID(CmdPtr->EventID, AppDataPtr->BinFilters);
        -: 1430:
        2: 1431:      if(FilterPtr != NULL)
        -: 1432:      {
        1: 1433:         FilterPtr->Count = 0;
        -: 1434:
        1: 1435:         EVS_SendEvent(CFE_EVS_RSTFILTER_EID, CFE_EVS_EventType_DEBUG,
        -: 1436:                           "Reset Filter Command Received with AppName = %s, EventID = 0x%08x",
        -: 1437:                           LocalName, (unsigned int)CmdPtr->EventID);
        -: 1438:      }
        -: 1439:      else
        -: 1440:      {
        1: 1441:         EVS_SendEvent(CFE_EVS_ERR_EVTIDNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1442:                           "%s Event ID %d not registered for filtering: CC = %lu",
        -: 1443:                           LocalName, (int)CmdPtr->EventID, (long unsigned int)CFE_EVS_RESET_FILTER_CC);
        -: 1444:
        1: 1445:         Status = CFE_EVS_EVT_NOT_REGISTERED;
        -: 1446:      }
        -: 1447:   }
        3: 1448:   else if(Status == CFE_EVS_APP_NOT_REGISTERED)
        -: 1449:   {
        1: 1450:      EVS_SendEvent(CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1451:                        "%s not registered with EVS: CC = %lu",
        -: 1452:                        LocalName, (long unsigned int)CFE_EVS_RESET_FILTER_CC);
        -: 1453:   }
        2: 1454:   else if(Status == CFE_EVS_APP_ILLEGAL_APP_ID)
        -: 1455:   {
        1: 1456:      EVS_SendEvent(CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_EventType_ERROR,
        -: 1457:                        "Illegal application ID %d retrieved for %s: CC = %lu",
        -: 1458:                        (int)AppID, LocalName, (long unsigned int)CFE_EVS_RESET_FILTER_CC);
        -: 1459:   }
        -: 1460:   else
        -: 1461:   {
        1: 1462:      EVS_SendEvent(CFE_EVS_ERR_NOAPPIDFOUND_EID, CFE_EVS_EventType_ERROR,
        -: 1463:                        "Unable to retrieve application ID for %s: CC = %lu",
        -: 1464:                        LocalName, (long unsigned int)CFE_EVS_RESET_FILTER_CC);
        -: 1465:   }
        -: 1466:
        5: 1467:   return Status;
        -: 1468:
        -: 1469:} /* End CFE_EVS_ResetFilterCmd */
        -: 1470:
        -: 1471:
        -: 1472:/*
        -: 1473:**             Function Prologue
        -: 1474:**
        -: 1475:** Function Name:      CFE_EVS_ResetAllFiltersCmd
        -: 1476:**
        -: 1477:** Purpose:  This routine sets all application event filter counters to zero for the given
        -: 1478:**           application identifier
        -: 1479:**
        -: 1480:** Assumptions and Notes:
        -: 1481:**
        -: 1482:*/
        5: 1483:int32 CFE_EVS_ResetAllFiltersCmd(const CFE_EVS_ResetAllFilters_t *data)
        -: 1484:{
        5: 1485:   uint32                    AppID  = CFE_EVS_UNDEF_APPID;
        5: 1486:   const CFE_EVS_AppNameCmd_Payload_t *CmdPtr = &data->Payload;
        -: 1487:   int32                     Status;
        -: 1488:   uint32                    i;
        -: 1489:   char                      LocalName[OS_MAX_API_NAME];
        -: 1490:
        -: 1491:   /*
        -: 1492:    * Althgouh EVS_GetApplicationInfo() does not require a null terminated argument,
        -: 1493:    * the value is passed to EVS_SendEvent which does require termination (normal C string)
        -: 1494:    */
        5: 1495:   CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppName, NULL, OS_MAX_API_NAME, sizeof(CmdPtr->AppName));
        -: 1496:
        -: 1497:   /* Retreive application data */
        5: 1498:   Status = EVS_GetApplicationInfo(&AppID, LocalName);
        -: 1499:
        5: 1500:   if(Status == CFE_SUCCESS)
        -: 1501:   {
       18: 1502:       for(i=0; i<CFE_PLATFORM_EVS_MAX_EVENT_FILTERS; i++)
        -: 1503:       {
       16: 1504:           CFE_EVS_GlobalData.AppData[AppID].BinFilters[i].Count = 0;
        -: 1505:       }
        -: 1506:
        2: 1507:       EVS_SendEvent(CFE_EVS_RSTALLFILTER_EID, CFE_EVS_EventType_DEBUG,
        -: 1508:               "Reset All Filters Command Received with AppName = %s",
        -: 1509:               LocalName);
        -: 1510:   }
        3: 1511:   else if(Status == CFE_EVS_APP_NOT_REGISTERED)
        -: 1512:   {
        1: 1513:       EVS_SendEvent(CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1514:               "%s not registered with EVS: CC = %lu",
        -: 1515:               LocalName, (long unsigned int)CFE_EVS_RESET_ALL_FILTERS_CC);
        -: 1516:   }
        2: 1517:   else if(Status == CFE_EVS_APP_ILLEGAL_APP_ID)
        -: 1518:   {
        1: 1519:       EVS_SendEvent(CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_EventType_ERROR,
        -: 1520:               "Illegal application ID %d retrieved for %s: CC = %lu",
        -: 1521:               (int)AppID, LocalName, (long unsigned int)CFE_EVS_RESET_ALL_FILTERS_CC);
        -: 1522:   }
        -: 1523:   else
        -: 1524:   {
        1: 1525:       EVS_SendEvent(CFE_EVS_ERR_NOAPPIDFOUND_EID, CFE_EVS_EventType_ERROR,
        -: 1526:               "Unable to retrieve application ID for %s: CC = %lu",
        -: 1527:               LocalName, (long unsigned int)CFE_EVS_RESET_ALL_FILTERS_CC);
        -: 1528:   }
        -: 1529:
        5: 1530:   return Status;
        -: 1531:
        -: 1532:} /* End CFE_EVS_ResetAllFiltersCmd */
        -: 1533:
        -: 1534:/*
        -: 1535:**             Function Prologue
        -: 1536:**
        -: 1537:** Function Name:      CFE_EVS_AddEventFilterCmd
        -: 1538:**
        -: 1539:** Purpose:  This routine adds the given event filter for the given application
        -: 1540:**           identifier and event identifier.
        -: 1541:**
        -: 1542:** Assumptions and Notes:
        -: 1543:**
        -: 1544:*/
       16: 1545:int32 CFE_EVS_AddEventFilterCmd(const CFE_EVS_AddEventFilter_t *data)
        -: 1546:{
       16: 1547:   const CFE_EVS_AppNameEventIDMaskCmd_Payload_t *CmdPtr = &data->Payload;
        -: 1548:   EVS_BinFilter_t     *FilterPtr;
       16: 1549:   uint32               AppID = CFE_EVS_UNDEF_APPID;
        -: 1550:   int32                Status;
        -: 1551:   EVS_AppData_t       *AppDataPtr;
        -: 1552:   char                 LocalName[OS_MAX_API_NAME];
        -: 1553:
        -: 1554:   /*
        -: 1555:    * Althgouh EVS_GetApplicationInfo() does not require a null terminated argument,
        -: 1556:    * the value is passed to EVS_SendEvent which does require termination (normal C string)
        -: 1557:    */
       16: 1558:   CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppName, NULL, OS_MAX_API_NAME, sizeof(CmdPtr->AppName));
        -: 1559:
        -: 1560:   /* Retreive application data */
       16: 1561:   Status = EVS_GetApplicationInfo(&AppID, LocalName);
        -: 1562:
       16: 1563:   if(Status == CFE_SUCCESS)
        -: 1564:   {
       13: 1565:      AppDataPtr = &CFE_EVS_GlobalData.AppData[AppID];
        -: 1566:
        -: 1567:      /* Check to see if this event is already registered for filtering */
       13: 1568:      FilterPtr = EVS_FindEventID(CmdPtr->EventID, AppDataPtr->BinFilters);
        -: 1569:
        -: 1570:      /* FilterPtr != NULL means that this Event ID was found as already being registered */
       13: 1571:      if (FilterPtr != NULL)
        -: 1572:      {
        2: 1573:          EVS_SendEvent(CFE_EVS_EVT_FILTERED_EID, CFE_EVS_EventType_ERROR,
        -: 1574:                      "Add Filter Command:AppName = %s, EventID = 0x%08x is already registered for filtering",
        -: 1575:                      LocalName, (unsigned int)CmdPtr->EventID);
        -: 1576:
        2: 1577:          Status = CFE_EVS_EVT_NOT_REGISTERED;
        -: 1578:      }
        -: 1579:      else
        -: 1580:      {
        -: 1581:          /* now check to see if there is a free slot */
       11: 1582:           FilterPtr = EVS_FindEventID(CFE_EVS_FREE_SLOT, AppDataPtr->BinFilters);
        -: 1583:
       11: 1584:            if (FilterPtr != NULL)
        -: 1585:            {
        -: 1586:               /* Add Filter Contents */
       10: 1587:               FilterPtr->EventID = CmdPtr->EventID;
       10: 1588:               FilterPtr->Mask = CmdPtr->Mask;
       10: 1589:               FilterPtr->Count = 0;
        -: 1590:
       10: 1591:               EVS_SendEvent(CFE_EVS_ADDFILTER_EID, CFE_EVS_EventType_DEBUG,
        -: 1592:                                 "Add Filter Command Received with AppName = %s, EventID = 0x%08x, Mask = 0x%04x",
        -: 1593:                                 LocalName, (unsigned int)CmdPtr->EventID, (unsigned int)CmdPtr->Mask);
        -: 1594:            }
        -: 1595:            else
        -: 1596:            {
        1: 1597:               EVS_SendEvent(CFE_EVS_ERR_MAXREGSFILTER_EID, CFE_EVS_EventType_ERROR,
        -: 1598:                                 "Add Filter Command: number of registered filters has reached max = %d",
        -: 1599:                                 CFE_PLATFORM_EVS_MAX_EVENT_FILTERS);
        -: 1600:
        1: 1601:               Status = CFE_EVS_APP_FILTER_OVERLOAD;
        -: 1602:            }
        -: 1603:      }/* end else*/
        -: 1604:   } /* end if (Status == CFE_SUCCESS) */
        -: 1605:
        3: 1606:   else if(Status == CFE_EVS_APP_NOT_REGISTERED)
        -: 1607:   {
        1: 1608:      EVS_SendEvent(CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1609:                        "%s not registered with EVS: CC = %lu",
        -: 1610:                        LocalName, (long unsigned int)CFE_EVS_ADD_EVENT_FILTER_CC);
        -: 1611:   }
        2: 1612:   else if(Status == CFE_EVS_APP_ILLEGAL_APP_ID)
        -: 1613:   {
        1: 1614:      EVS_SendEvent(CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_EventType_ERROR,
        -: 1615:                        "Illegal application ID %d retrieved for %s: CC = %lu",
        -: 1616:                        (int)AppID, LocalName, (long unsigned int)CFE_EVS_ADD_EVENT_FILTER_CC);
        -: 1617:   }
        -: 1618:   else
        -: 1619:   {
        1: 1620:      EVS_SendEvent(CFE_EVS_ERR_NOAPPIDFOUND_EID, CFE_EVS_EventType_ERROR,
        -: 1621:                        "Unable to retrieve application ID for %s: CC = %lu",
        -: 1622:                        LocalName,(long unsigned int)CFE_EVS_ADD_EVENT_FILTER_CC);
        -: 1623:   }
        -: 1624:
       16: 1625:   return Status;
        -: 1626:
        -: 1627:} /* CFE_End EVS_AddEventFilterCmd */
        -: 1628:
        -: 1629:/*
        -: 1630:**             Function Prologue
        -: 1631:**
        -: 1632:** Function Name:      CFE_EVS_DeleteEventFilterCmd
        -: 1633:**
        -: 1634:** Purpose:  This routine deletes the event filter for the given application
        -: 1635:**           identifer and event identifier
        -: 1636:**
        -: 1637:** Assumptions and Notes:
        -: 1638:**
        -: 1639:*/
        6: 1640:int32 CFE_EVS_DeleteEventFilterCmd(const CFE_EVS_DeleteEventFilter_t *data)
        -: 1641:{
        6: 1642:   const CFE_EVS_AppNameEventIDCmd_Payload_t *CmdPtr = &data->Payload;
        -: 1643:   EVS_BinFilter_t     *FilterPtr;
        6: 1644:   uint32               AppID = CFE_EVS_UNDEF_APPID;
        -: 1645:   int32                Status;
        -: 1646:   EVS_AppData_t       *AppDataPtr;
        -: 1647:   char                 LocalName[OS_MAX_API_NAME];
        -: 1648:
        -: 1649:   /*
        -: 1650:    * Althgouh EVS_GetApplicationInfo() does not require a null terminated argument,
        -: 1651:    * the value is passed to EVS_SendEvent which does require termination (normal C string)
        -: 1652:    */
        6: 1653:   CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppName, NULL, OS_MAX_API_NAME, sizeof(CmdPtr->AppName));
        -: 1654:
        -: 1655:   /* Retreive application data */
        6: 1656:   Status = EVS_GetApplicationInfo(&AppID, LocalName);
        -: 1657:
        6: 1658:   if(Status == CFE_SUCCESS)
        -: 1659:   {
        3: 1660:      AppDataPtr = &CFE_EVS_GlobalData.AppData[AppID];
        -: 1661:
        3: 1662:      FilterPtr = EVS_FindEventID(CmdPtr->EventID, AppDataPtr->BinFilters);
        -: 1663:
        3: 1664:      if(FilterPtr != NULL)
        -: 1665:      {
        -: 1666:         /* Clear Filter Contents */
        2: 1667:         FilterPtr->EventID = CFE_EVS_FREE_SLOT;
        2: 1668:         FilterPtr->Mask = CFE_EVS_NO_MASK;
        2: 1669:         FilterPtr->Count = 0;
        -: 1670:
        2: 1671:         EVS_SendEvent(CFE_EVS_DELFILTER_EID, CFE_EVS_EventType_DEBUG,
        -: 1672:                           "Delete Filter Command Received with AppName = %s, EventID = 0x%08x",
        -: 1673:                           LocalName, (unsigned int)CmdPtr->EventID);
        -: 1674:
        -: 1675:      }
        -: 1676:      else
        -: 1677:      {
        1: 1678:         EVS_SendEvent(CFE_EVS_ERR_EVTIDNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1679:                           "%s Event ID %d not registered for filtering: CC = %lu",
        -: 1680:                           LocalName, (int)CmdPtr->EventID, (long unsigned int)CFE_EVS_DELETE_EVENT_FILTER_CC);
        1: 1681:         Status = CFE_EVS_EVT_NOT_REGISTERED;
        -: 1682:      }
        -: 1683:   }
        3: 1684:   else if(Status == CFE_EVS_APP_NOT_REGISTERED)
        -: 1685:   {
        1: 1686:      EVS_SendEvent(CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_EventType_ERROR,
        -: 1687:                        "%s not registered with EVS: CC = %lu",
        -: 1688:                        LocalName, (long unsigned int)CFE_EVS_DELETE_EVENT_FILTER_CC);
        -: 1689:   }
        2: 1690:   else if(Status == CFE_EVS_APP_ILLEGAL_APP_ID)
        -: 1691:   {
        1: 1692:      EVS_SendEvent(CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_EventType_ERROR,
        -: 1693:                        "Illegal application ID %d retrieved for %s: CC = %lu",
        -: 1694:                        (int)AppID, LocalName, (long unsigned int)CFE_EVS_DELETE_EVENT_FILTER_CC);
        -: 1695:   }
        -: 1696:   else
        -: 1697:   {
        1: 1698:      EVS_SendEvent(CFE_EVS_ERR_NOAPPIDFOUND_EID, CFE_EVS_EventType_ERROR,
        -: 1699:                        "Unable to retrieve application ID for %s: CC = %lu",
        -: 1700:                        LocalName, (long unsigned int)CFE_EVS_DELETE_EVENT_FILTER_CC);
        -: 1701:   }
        -: 1702:
        6: 1703:   return Status;
        -: 1704:
        -: 1705:} /* End EVS_DeleteEventFilterCmd */
        -: 1706:
        -: 1707:
        -: 1708:/*
        -: 1709:**             Function Prologue
        -: 1710:**
        -: 1711:** Function Name:      CFE_EVS_WriteAppDataFileCmd
        -: 1712:**
        -: 1713:** Purpose:  This routine writes all application data to a file for all applications that
        -: 1714:**           have registered with the EVS.  The application data includes the Application ID,
        -: 1715:**           Active Flag, Event Count, Event Types Active Flag, and Filter Data.
        -: 1716:**
        -: 1717:** Assumptions and Notes:
        -: 1718:**
        -: 1719:*/
        5: 1720:int32 CFE_EVS_WriteAppDataFileCmd(const CFE_EVS_WriteAppDataFile_t *data)
        -: 1721:{
        -: 1722:   int32                             Result;
        -: 1723:   int32                             FileHandle;
        -: 1724:   int32                             BytesWritten;
        5: 1725:   uint32                            EntryCount = 0;
        -: 1726:   uint32                            i;
        -: 1727:   static CFE_EVS_AppDataFile_t      AppDataFile;
        -: 1728:   CFE_FS_Header_t                   FileHdr;
        -: 1729:   EVS_AppData_t                    *AppDataPtr;
        5: 1730:   const CFE_EVS_AppDataCmd_Payload_t *CmdPtr = &data->Payload;
        -: 1731:   char                              LocalName[OS_MAX_PATH_LEN];
        -: 1732:
        -: 1733:   /* Copy the commanded filename into local buffer to ensure size limitation and to allow for modification */
        5: 1734:   CFE_SB_MessageStringGet(LocalName, CmdPtr->AppDataFilename, CFE_PLATFORM_EVS_DEFAULT_APP_DATA_FILE,
        -: 1735:           OS_MAX_PATH_LEN, sizeof(CmdPtr->AppDataFilename));
        -: 1736:
        -: 1737:   /* Create Application Data File */
        5: 1738:   FileHandle = OS_creat(LocalName, OS_WRITE_ONLY);
        -: 1739:
        5: 1740:   if (FileHandle < OS_FS_SUCCESS)
        -: 1741:   {
        2: 1742:      EVS_SendEvent(CFE_EVS_ERR_CRDATFILE_EID, CFE_EVS_EventType_ERROR,
        -: 1743:                   "Write App Data Command Error: OS_creat = 0x%08X, filename = %s",
        -: 1744:                    (unsigned int)FileHandle, LocalName);
        -: 1745:
        2: 1746:      Result = FileHandle;
        -: 1747:   }
        -: 1748:   else
        -: 1749:   {
        -: 1750:      /* Result will be overridden if everything works */
        3: 1751:      Result = CFE_EVS_FILE_WRITE_ERROR;
        -: 1752:
        -: 1753:      /* Initialize cFE file header */
        3: 1754:      CFE_FS_InitHeader(&FileHdr, "EVS Application Data File", CFE_FS_SubType_EVS_APPDATA);
        -: 1755:
        -: 1756:      /* Write cFE file header to the App File */
        3: 1757:      BytesWritten = CFE_FS_WriteHeader(FileHandle, &FileHdr);
        -: 1758:
        3: 1759:      if (BytesWritten == sizeof(CFE_FS_Header_t))
        -: 1760:      {
       34: 1761:         for (i = 0; i < CFE_PLATFORM_ES_MAX_APPLICATIONS; i++)
        -: 1762:         {
        -: 1763:            /* Only have data for apps that are registered */
       33: 1764:            if (CFE_EVS_GlobalData.AppData[i].RegisterFlag == TRUE)
        -: 1765:            {
        2: 1766:               AppDataPtr = &CFE_EVS_GlobalData.AppData[i];
        -: 1767:
        -: 1768:               /* Clear application file data record */
        2: 1769:               memset(&AppDataFile, 0, sizeof(CFE_EVS_AppDataFile_t));
        -: 1770:
        -: 1771:               /* Copy application data to application file data record */
        2: 1772:               CFE_ES_GetAppName(AppDataFile.AppName, i, OS_MAX_API_NAME);
        2: 1773:               AppDataFile.ActiveFlag = AppDataPtr->ActiveFlag;
        2: 1774:               AppDataFile.EventCount = AppDataPtr->EventCount;
        2: 1775:               AppDataFile.EventTypesActiveFlag = AppDataPtr->EventTypesActiveFlag;
        -: 1776:
        -: 1777:               /* Copy application filter data to application file data record */
        2: 1778:               memcpy(AppDataFile.Filters, AppDataPtr->BinFilters,
        -: 1779:                              CFE_PLATFORM_EVS_MAX_EVENT_FILTERS * sizeof(EVS_BinFilter_t));
        -: 1780:
        -: 1781:               /* Write application data record to file */
        2: 1782:               BytesWritten = OS_write(FileHandle, &AppDataFile, sizeof(CFE_EVS_AppDataFile_t));
        -: 1783:
        2: 1784:               if (BytesWritten == sizeof(CFE_EVS_AppDataFile_t))
        -: 1785:               {
        1: 1786:                  EntryCount++;
        -: 1787:               }
        -: 1788:               else
        -: 1789:               {
        1: 1790:                  EVS_SendEvent(CFE_EVS_ERR_WRDATFILE_EID, CFE_EVS_EventType_ERROR,
        -: 1791:                               "Write App Data Command Error: OS_write = 0x%08X, filename = %s",
        -: 1792:                                (unsigned int)BytesWritten, LocalName);
        1: 1793:                  break;
        -: 1794:               }
        -: 1795:            }
        -: 1796:         }
        -: 1797:
        -: 1798:         /* Process command handler success result */
        2: 1799:         if (i == CFE_PLATFORM_ES_MAX_APPLICATIONS)
        -: 1800:         {
        1: 1801:            EVS_SendEvent(CFE_EVS_WRDAT_EID, CFE_EVS_EventType_DEBUG,
        -: 1802:                         "Write App Data Command: %d application data entries written to %s",
        -: 1803:                          (int)EntryCount, LocalName);
        1: 1804:            Result = CFE_SUCCESS;
        -: 1805:         }
        -: 1806:      }
        -: 1807:
        3: 1808:      OS_close(FileHandle);
        -: 1809:   }
        -: 1810:
        5: 1811:   return(Result);
        -: 1812:
        -: 1813:} /* End CFE_EVS_WriteAppDataFileCmd */
        -: 1814:
        -: 1815:
        -: 1816:/* End cfe_evs_task */
